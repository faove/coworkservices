[{"/var/www/html/coworkservices/src/index.js":"1","/var/www/html/coworkservices/src/App.jsx":"2","/var/www/html/coworkservices/src/redux/store.js":"3","/var/www/html/coworkservices/src/components/Client.jsx":"4","/var/www/html/coworkservices/src/components/Setting.jsx":"5","/var/www/html/coworkservices/src/components/Services.jsx":"6","/var/www/html/coworkservices/src/components/Dashboard.jsx":"7","/var/www/html/coworkservices/src/redux/serviceAssocDuck.js":"8","/var/www/html/coworkservices/src/redux/clientDuck.js":"9","/var/www/html/coworkservices/src/redux/associateDuck.js":"10","/var/www/html/coworkservices/src/redux/typestatusDuck.js":"11","/var/www/html/coworkservices/src/redux/categoryDuck.js":"12","/var/www/html/coworkservices/src/redux/serviceDuck.js":"13","/var/www/html/coworkservices/src/redux/productDuck.js":"14","/var/www/html/coworkservices/src/redux/areaDuck.js":"15","/var/www/html/coworkservices/src/redux/typeproductDuck.js":"16","/var/www/html/coworkservices/src/components/ClientEditForm.jsx":"17","/var/www/html/coworkservices/src/components/ClientTable.jsx":"18","/var/www/html/coworkservices/src/components/ClientAddForm.jsx":"19","/var/www/html/coworkservices/src/components/Associate.jsx":"20","/var/www/html/coworkservices/src/components/ServicesTable.jsx":"21","/var/www/html/coworkservices/src/components/Area.jsx":"22"},{"size":219,"mtime":1618086839303,"results":"23","hashOfConfig":"24"},{"size":2267,"mtime":1618086778847,"results":"25","hashOfConfig":"24"},{"size":1083,"mtime":1618086946522,"results":"26","hashOfConfig":"24"},{"size":3802,"mtime":1618086929655,"results":"27","hashOfConfig":"24"},{"size":2662,"mtime":1618086929715,"results":"28","hashOfConfig":"24"},{"size":20503,"mtime":1618161454773,"results":"29","hashOfConfig":"24"},{"size":162,"mtime":1618086929663,"results":"30","hashOfConfig":"24"},{"size":846,"mtime":1618086946518,"results":"31","hashOfConfig":"24"},{"size":5728,"mtime":1618086946514,"results":"32","hashOfConfig":"24"},{"size":4569,"mtime":1618086946510,"results":"33","hashOfConfig":"24"},{"size":939,"mtime":1618086946526,"results":"34","hashOfConfig":"24"},{"size":4341,"mtime":1618086946514,"results":"35","hashOfConfig":"24"},{"size":5812,"mtime":1618086946518,"results":"36","hashOfConfig":"24"},{"size":4493,"mtime":1618086946514,"results":"37","hashOfConfig":"24"},{"size":4921,"mtime":1618086946506,"results":"38","hashOfConfig":"24"},{"size":970,"mtime":1618086946522,"results":"39","hashOfConfig":"24"},{"size":11343,"mtime":1618086929659,"results":"40","hashOfConfig":"24"},{"size":3517,"mtime":1618086929659,"results":"41","hashOfConfig":"24"},{"size":4906,"mtime":1618086929655,"results":"42","hashOfConfig":"24"},{"size":12804,"mtime":1618086929651,"results":"43","hashOfConfig":"24"},{"size":10603,"mtime":1618086929715,"results":"44","hashOfConfig":"24"},{"size":13509,"mtime":1618086929647,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"p3gtw2",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"48"},"/var/www/html/coworkservices/src/index.js",[],["104","105"],"/var/www/html/coworkservices/src/App.jsx",[],"/var/www/html/coworkservices/src/redux/store.js",[],"/var/www/html/coworkservices/src/components/Client.jsx",["106","107"],"import React,{useState, Fragment} from 'react';\nimport ClientEditForm from './ClientEditForm'; \nimport ClientAddForm from './ClientAddForm'; \nimport ClientTable from './ClientTable'; \n// import { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { getClient, getNextClient} from '../redux/clientDuck';\nimport Button from '@material-ui/core/Button'\n\nconst Client = (props) => {\n\n    //const {id} = useParams()\n    // const {register, errors,setValue, handleSubmit} = useForm();\n    //Edit client\n    const [editing, setEditing] = useState(false); \n    // React.useEffect.getClient()\n    const [cliente, setCliente] = useState([]);\n    \n    const [currentCliente, setCurrentCliente] = useState([]); \n\n\n    const dispatch = useDispatch()\n\n\n\n    // crearmos el state utilizando nuestra tienda\n    // store.client lo sacamos de la tienda\n    \n    // const clientData = useSelector(store => store.client.add)\n    // const clientDel = useSelector(store => store.client.del)\n    const client = useSelector(store => store.client.array)\n    \n    React.useEffect( () => {\n      dispatch(getClient());\n      // setCurrentCliente(client)\n      // setCliente(dispatch(getClient()));\n      // console.log()\n      //dispatch.getClient();\n        //dispatch(getClient());\n        // getClient();\n      //  getCliente();\n      //  ServiceHttpClient.getClient().then(x => setCliente(x));\n        //addClient();\n    }, [setCliente]);\n  // },[id])\n\n\n\n\n\n\n\n\n    const editRow = (client) => {\n      console.log('editRow')\n      console.log(client)\n      setEditing(true);\n  \n      setCurrentCliente(\n        { \n          id: client.id, name: client.name, last_name: client.last_name,\n          dni: client.dni, email: client.email,address: client.address\n        }\n      )\n      // console.log(currentCliente)\n\n    }\n\n    \n\n  \n\n    return (\n        <Fragment>\n            <div className=\"container\">\n              <div className=\"flex-row\">\n                <div className=\"flex-large\">\n                  { \n                  editing ? (\n                    <div>\n                      <h2>Edit Client</h2>\n                      <ClientEditForm \n                      cliente={client}                 \n                      currentCliente={currentCliente} \n                      setCurrentCliente={setCurrentCliente}\n                      />\n                    </div>\n                  ):(\n                    <div>\n                      <h2>Add Client</h2>\n                      <ClientAddForm \n                      // addClient={addClient} \n                      // addClient={dispatch(addClient())} crea un ciclo\n                      />\n                    </div>\n                  )\n                  }\n                  \n                  <div className=\"flex-large\">\n                  <h2>View Client</h2>\n                  \n                    <ClientTable \n                    cliente={client} \n                    currentCliente={currentCliente}\n                    // deleteClient={deleteClient} \n                    editRow={editRow}\n                    />\n                  {/* <ServiceHttpClient getCliente={getCliente}/> */}\n                  {/* <Client \n                    getClient={getClient}\n                    cliente={cliente} /> */}\n                </div>\n                <div>\n                  <Button variant=\"text\" color=\"default\" size=\"small\" onClick={() => dispatch(getNextClient(20))}>\n                    After\n                  </Button>\n                  <Button variant=\"text\" color=\"default\" size=\"small\" onClick={() => dispatch(getNextClient(20))}>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n        </div>  \n        \n      </Fragment>\n    )\n}\n\nexport default Client;\n","/var/www/html/coworkservices/src/components/Setting.jsx",[],"/var/www/html/coworkservices/src/components/Services.jsx",["108","109","110","111","112","113","114"],"/var/www/html/coworkservices/src/components/Dashboard.jsx",[],"/var/www/html/coworkservices/src/redux/serviceAssocDuck.js",[],"/var/www/html/coworkservices/src/redux/clientDuck.js",["115"],"import axios from 'axios';\n//constante\n\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_CLIENT = 'GET_CLIENT'\nconst GET_CLIENT_ID = 'GET_CLIENT_ID'\nconst GET_CLIENT_NEXT = 'GET_CLIENT_NEXT'\nconst POST_CLIENT_ADD = 'POST_CLIENT_ADD'\nconst DELETE_CLIENT = 'DELETE_CLIENT'\nconst UPDATE_CLIENT = 'UPDATE_CLIENT'\n\n//reducer\nexport default function clientReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_CLIENT:    \n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_CLIENT_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case POST_CLIENT_ADD:    \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_CLIENT:   \n            // console.log('update cliente++++++++')\n            // console.log(state.array)\n            // const re = state.array.map(array => array.id === action.payload.id ? (array = action.payload.array) : array\n            // const re =state.array.map(\n            //         client => (client.id === action.payload.id ? action.payload.array : client)\n            //           )\n            \n            // console.log(re)\n            // console.log('action.payload.array')\n            // console.log(action.payload.array,action.payload.array.id )\n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n            // console.log('varr>>>>>>>')\n            // console.log(varr)\n            // console.log('state.arra>>>>>>>')\n            // console.log(state.array)\n\n            return {\n                ...state, \n                array: varr\n                // array: state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n            }\n        case DELETE_CLIENT:    \n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getClient = () => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().client\n        const response = await axios.get(`http://localhost:8000/api/clients?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_CLIENT,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n//Next 20 Client\nexport const getNextClient = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().client\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/clients?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_CLIENT_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n        //   const data = await response;\n          \n        //   setCliente(data.data)\n    }catch(error){\n        console.log(error)\n    }\n}\n\n\n\n//Get Client Id current\nexport const getClientId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().client\n        const response = await axios.get(`http://localhost:8000/api/clients/${id}`)\n        dispatch({\n            type: GET_CLIENT_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n//Behind 20 Client\n\n//addClient \nexport const addClient = (name,last_name,dni,address,email) => async (dispatch, getState)  => {\n  try {\n    // console.log('clienteDuck addClient')\n    // console.log(email)\n    const response = await axios.post(\n      \"http://localhost:8000/api/clients\",\n      {\n          name,last_name,dni,address,email\n      }\n    )\n    dispatch({\n        type: POST_CLIENT_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteClient\nexport const  deleteClient = (id) => async (dispatch, getState) => {\n    try {\n        // console.log('clienteDuck deleteClient')\n        // console.log(id)\n        // console.log(getState().client)\n\n\n        const response = await axios.delete(\n            `http://localhost:8000/api/clients/${id}`          \n        )\n        dispatch({\n            type: DELETE_CLIENT,\n            payload: {\n                array: id\n            }\n            \n        }) \n        // const data = await response;\n\n        // console.log('delete Client')\n        // console.log(data)\n        \n        //   const arrayFilter = cliente.filter(client => client.id !== id);\n        //   setCliente(arrayFilter);\n\n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updateClient\nexport const updateClient = (id,updatedClient) => async (dispatch, getState) => {\n\ntry {\n    // console.log('export update Cliente')\n    // console.log(id,updatedClient)\n    //setEditing(false);\n    const response = await axios.put(\n    `http://localhost:8000/api/clients/${id}`, updatedClient)\n        dispatch({\n        type: UPDATE_CLIENT,\n        payload: {\n            array: response.data\n        }\n    \n    }) \n\n//   setCliente(\n//     cliente.map(\n//     client => (client.id === id ? updatedClient : client)\n//       ))\n\n//   console.log('update Client')\n//   console.log(id)\n//   console.log(updatedClient)\n\n}catch (error){\n    console.log(error)\n}\n\n}","/var/www/html/coworkservices/src/redux/associateDuck.js",["116"],"import axios from 'axios';\n//constante\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_ASSOCIATE = 'GET_ASSOCIATE'\nconst GET_ASSOCIATE_ID = 'GET_ASSOCIATE_ID'\nconst GET_ASSOCIATE_NEXT = 'GET_ASSOCIATE_NEXT'\nconst POST_ASSOCIATE_ADD = 'POST_ASSOCIATE_ADD'\nconst DELETE_ASSOCIATE = 'DELETE_ASSOCIATE'\nconst UPDATE_ASSOCIATE = 'UPDATE_ASSOCIATE'\n\n//reducer\nexport default function associateReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_ASSOCIATE:  \n        // console.log('state')\n        // console.log(state)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_ASSOCIATE_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case POST_ASSOCIATE_ADD: \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_ASSOCIATE:   \n            \n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n\n            return {\n                ...state, \n                array: varr\n            }\n        case DELETE_ASSOCIATE:    \n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getAssociate = () => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().associate\n        const response = await axios.get(`http://localhost:8000/api/associates?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_ASSOCIATE,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Next 20 Associate\nexport const getNextAssociate = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().Associate\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/associates?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_ASSOCIATE_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Get Associate Id current\nexport const getAssociateId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().Associate\n        const response = await axios.get(`http://localhost:8000/api/associates/${id}`)\n        dispatch({\n            type: GET_ASSOCIATE_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//addAssociate \nexport const addAssociate = (name,last_name,dni,address,email,gender) => async (dispatch, getState)  => {\n  try {\n    // console.log('AssociateDuck addAssociate')\n    // console.log(name)\n    const response = await axios.post(\n      \"http://localhost:8000/api/associates\",\n      {\n          name,last_name,dni,address,email,gender\n      }\n    )\n    dispatch({\n        type: POST_ASSOCIATE_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteAssociate\nexport const  deleteAssociate = (id) => async (dispatch, getState) => {\n    try {\n        const response = await axios.delete(\n            `http://localhost:8000/api/associates/${id}`          \n        )\n        dispatch({\n            type: DELETE_ASSOCIATE,\n            payload: {\n                array: id\n            }\n        }) \n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updateAssociate\nexport const updateAssociate = (id,name,last_name,dni,address,email,gender) => async (dispatch, getState) => {\n\n    try {\n        console.log('updateAssociate 9999')\n        console.log(name,last_name)\n        console.log(email)\n        console.log(gender)\n        const response = await axios.put(\n        `http://localhost:8000/api/associates/${id}`, {name,last_name,dni,address,email,gender})\n            dispatch({\n            type: UPDATE_ASSOCIATE,\n            payload: {\n                array: response.data\n            }\n        \n        }) \n\n    }catch (error){\n        console.log(error)\n    }\n\n}","/var/www/html/coworkservices/src/redux/typestatusDuck.js",[],"/var/www/html/coworkservices/src/redux/categoryDuck.js",["117"],"import axios from 'axios';\n\n//constante\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_CATEGORY = 'GET_CATEGORY'\nconst GET_CATEGORY_ID = 'GET_CATEGORY_ID'\nconst GET_CATEGORY_NEXT = 'GET_CATEGORY_NEXT'\nconst POST_CATEGORY_ADD = 'POST_CATEGORY_ADD'\nconst DELETE_CATEGORY = 'DELETE_CATEGORY'\nconst UPDATE_CATEGORY = 'UPDATE_CATEGORY'\n\n//reducer\nexport default function categoryReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_CATEGORY:   \n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_CATEGORY_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case POST_CATEGORY_ADD:    \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_CATEGORY:   \n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n            return {\n                ...state, \n                array: varr\n            }\n        case DELETE_CATEGORY:    \n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getCategory = () => async (dispatch, getState)  => {\n    try{\n        \n        const {offset} = getState().category\n        const response = await axios.get(`http://localhost:8000/api/categories?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_CATEGORY,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n//Next 20 Category\nexport const getNextCategory = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().category\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/categories?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_CATEGORY_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n        //   const data = await response;\n          \n        //   setCliente(data.data)\n    }catch(error){\n        console.log(error)\n    }\n}\n\n\n\n//Get Category Id current\nexport const getCategoryId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().category\n        const response = await axios.get(`http://localhost:8000/api/categories/${id}`)\n        dispatch({\n            type: GET_CATEGORY_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n//Behind 20 Category\n\n//addCategory \nexport const addCategory = (name,last_name,dni,address,email) => async (dispatch, getState)  => {\n  try {\n    // console.log('categoryDuck addCategory')\n    // console.log(email)\n    const response = await axios.post(\n      \"http://localhost:8000/api/categories\",\n      {\n          name,last_name,dni,address,email\n      }\n    )\n    dispatch({\n        type: POST_CATEGORY_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteClient\nexport const  deleteCategory = (id) => async (dispatch, getState) => {\n    try {\n\n\n        const response = await axios.delete(\n            `http://localhost:8000/api/categories/${id}`          \n        )\n        dispatch({\n            type: DELETE_CATEGORY,\n            payload: {\n                array: id\n            }\n            \n        }) \n\n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updateCategory\nexport const updateCategory = (id,updatedCategory) => async (dispatch, getState) => {\n\ntry {\n    const response = await axios.put(\n    `http://localhost:8000/api/categories/${id}`, updatedCategory)\n        dispatch({\n        type: UPDATE_CATEGORY,\n        payload: {\n            array: response.data\n        }\n    \n    }) \n\n}catch (error){\n    console.log(error)\n}\n\n}","/var/www/html/coworkservices/src/redux/serviceDuck.js",["118"],"import axios from 'axios';\n//constante\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_SERVICE = 'GET_SERVICE'\nconst GET_SERVICE_ID = 'GET_SERVICE_ID'\nconst GET_SERVICE_NEXT = 'GET_SERVICE_NEXT'\nconst POST_SERVICE_ADD = 'POST_SERVICE_ADD'\nconst DELETE_SERVICE = 'DELETE_SERVICE'\nconst UPDATE_SERVICE = 'UPDATE_SERVICE'\nconst GET_SERVICE_ASSOC = 'GET_SERVICE_ASSOC'\n\n//reducer\nexport default function serviceReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_SERVICE:  \n        console.log('state')\n        console.log(state)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_SERVICE_ID:  \n            console.log('state')\n            console.log(state)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_SERVICE_ASSOC:  \n            console.log('GET_SERVICE_ASSOC')\n            console.log(action.payload.array)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_SERVICE_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case POST_SERVICE_ADD: \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_SERVICE:   \n            \n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n\n            return {\n                ...state, \n                array: varr\n            }\n        case DELETE_SERVICE: \n        console.log('POST_SERVICE_del')\n        console.log(action.payload.array) \n        console.log(state.array.id)\n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getService = () => async (dispatch, getState)  => {\n    try{\n        \n        const {offset} = getState().service\n        const response = await axios.get(`http://localhost:8000/api/services?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_SERVICE,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Next 20 service\nexport const getNextService = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().Service\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/services?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_SERVICE_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Get Service id current\nexport const getServiceId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().Service\n        const response = await axios.get(`http://localhost:8000/api/services/${id}`)\n        dispatch({\n            type: GET_SERVICE_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Get Service con el id del client current\n// export const getServiceAssoc = (id) => async (dispatch)  => {\n//     try{\n//         // const {offset} = getState().Service\n//         const response = await axios.get(`http://localhost:8000/services/associate/${id}`)\n//         dispatch({\n//             type: GET_SERVICE_ASSOC,\n//             payload: {\n//                 array: response.data\n//             }\n//         })  \n\n//     }catch(error){\n//         console.log(error)\n//     }\n// }\n\n//addService \nexport const addService = (category_id,areas_id,associate_id,\n    client_id,name_service,gross_amount,date_service\n    ) => async (dispatch, getState)  => {\n  try {\n    \n    // console.log(areas_id)\n    // console.log(associate_id)\n    // console.log(client_id)\n\n\n    // console.log(name_service)\n    // console.log(gross_amount)\n\n    // console.log(date_service)\n\n    const response = await axios.post(`http://localhost:8000/api/services`,\n      {\n        category_id, areas_id, associate_id, client_id,name_service, gross_amount, date_service\n      }\n    )\n    dispatch({\n        type: POST_SERVICE_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteService\nexport const deleteService = (id) => async (dispatch, getState) => {\n    try {\n        console.log('deleteService')\n        console.log(id)\n        const response = await axios.delete(\n            `http://localhost:8000/api/services/${id}`          \n        )\n        dispatch({\n            type: DELETE_SERVICE,\n            payload: {\n                array: id\n            }\n        }) \n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updateService\nexport const updateService = (id,category_id, areas_id, associate_id, client_id, name_service, gross_amount, date_service) => async (dispatch, getState) => {\n\n    try {\n        const response = await axios.put(\n        `http://localhost:8000/api/services/${id}`, {category_id, areas_id, associate_id, client_id, name_service, gross_amount, date_service})\n            dispatch({\n            type: UPDATE_SERVICE,\n            payload: {\n                array: response.data\n            }\n        \n        }) \n\n    }catch (error){\n        console.log(error)\n    }\n\n}","/var/www/html/coworkservices/src/redux/productDuck.js",["119"],"import axios from 'axios';\n//constante\n\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_PRODUCT = 'GET_PRODUCT'\nconst GET_PRODUCT_ID = 'GET_PRODUCT_ID'\nconst GET_PRODUCT_NEXT = 'GET_PRODUCT_NEXT'\nconst POST_PRODUCT_ADD = 'POST_PRODUCT_ADD'\nconst DELETE_PRODUCT = 'DELETE_PRODUCT'\nconst UPDATE_PRODUCT = 'UPDATE_PRODUCT'\n\n//reducer\nexport default function productReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_PRODUCT:    \n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_PRODUCT_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case POST_PRODUCT_ADD:    \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_PRODUCT:   \n\n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n\n            return {\n                ...state, \n                array: varr\n            }\n        case DELETE_PRODUCT:    \n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getProduct = () => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().product\n        const response = await axios.get(`http://localhost:8000/api/products?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_PRODUCT,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Next 20 product\nexport const getNextProduct = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().product\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/products?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_PRODUCT_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n\n//Get Product Id current\nexport const getProductId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().product\n        const response = await axios.get(`http://localhost:8000/api/products/${id}`)\n        dispatch({\n            type: GET_PRODUCT_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n//Behind 20 Product\n\n//addProduct \nexport const addProduct = (services_id, lexido, name_products,date_start,date_end,date_pay,quota,amount,invoice_number,\n    method_payment,payment_reference, deadlines,status) => async (dispatch, getState)  => {\n  try {\n    // console.log('ProducteDuck addProduct')\n    // console.log(email)\n    const response = await axios.post(\n      \"http://localhost:8000/api/products\",\n      {\n         services_id, lexido, name_products,date_start,\n         date_end,date_pay,quota,amount,invoice_number,\n         method_payment,payment_reference, deadlines,status\t\n      }\n    )\n    dispatch({\n        type: POST_PRODUCT_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteProduct\nexport const  deleteProduct = (id) => async (dispatch, getState) => {\n    try {\n\n        const response = await axios.delete(\n            `http://localhost:8000/api/products/${id}`          \n        )\n        dispatch({\n            type: DELETE_PRODUCT,\n            payload: {\n                array: id\n            }\n            \n        }) \n\n\n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updateProduct\nexport const updateProduct = (id,updatedProduct) => async (dispatch, getState) => {\n\n    try {\n\n        const response = await axios.put(\n        `http://localhost:8000/api/products/${id}`, updatedProduct)\n            dispatch({\n            type: UPDATE_PRODUCT,\n            payload: {\n                array: response.data\n            }\n        \n        }) \n\n    }catch (error){\n        console.log(error)\n    }\n\n}","/var/www/html/coworkservices/src/redux/areaDuck.js",["120"],"import axios from 'axios';\n//constante\nconst dataInicial =  {\n    array : [],\n    offset: 0\n}\n\nconst GET_AREA = 'GET_AREA'\nconst GET_AREA_ID = 'GET_AREA_ID'\nconst GET_AREA_CATEG = 'GET_AREA_CATEG'\nconst GET_AREA_NEXT = 'GET_AREA_NEXT'\nconst POST_AREA_ADD = 'POST_AREA_ADD'\nconst DELETE_AREA = 'DELETE_AREA'\nconst UPDATE_AREA = 'UPDATE_AREA'\n\n//reducer\nexport default function areaReducer(state = dataInicial, action){\n    switch(action.type){\n        case GET_AREA:  \n            console.log('GET_AREA')\n            console.log(action.payload.array)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case GET_AREA_NEXT:    \n            return {\n                ...state, \n                array: action.payload.array, offset: action.payload.offset\n            }\n        case GET_AREA_CATEG:  \n            console.log('GET_AREA_CATEG')\n            console.log(action.payload.array)\n            return {\n                ...state, \n                array: action.payload.array\n            }\n        case POST_AREA_ADD: \n            return {\n                ...state, \n                array: [...state.array, action.payload.array]\n            }\n        case UPDATE_AREA:   \n            const varr = state.array.map(array => array.id === action.payload.array.id ? action.payload.array : array)\n            return {\n                ...state, \n                array: varr\n            }\n        case DELETE_AREA:    \n            return {\n                ...state, \n                array: state.array.filter(array => array.id !== action.payload.array)\n                }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const getAreas = () => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().area\n        const response = await axios.get(`http://localhost:8000/api/areas?offset=${offset}&limit=20`)\n        dispatch({\n            type: GET_AREA,\n            payload: {\n                array: response.data,\n                offset: offset\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Next 20 Associate\nexport const getNextAreas = (numero) => async (dispatch, getState)  => {\n    try{\n        const {offset} = getState().Area\n        const siguiente = offset + numero\n        \n        console.log('siguiente: ', siguiente)\n\n        const response = await axios.get(`http://localhost:8000/api/areas?offset=${siguiente}&limit=20`)\n        dispatch({\n            type: GET_AREA_NEXT,\n            payload: {\n                array: response.data,\n                offset: siguiente\n            }\n            \n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//Get Associate Id current\nexport const getAreasId = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().Associate\n        const response = await axios.get(`http://localhost:8000/api/areas/${id}`)\n        dispatch({\n            type: GET_AREA_ID,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//addArea\nexport const addArea = (category_id,name,status) => async (dispatch, getState)  => {\n  try {\n    console.log('AreaDuck addArea')\n    console.log(name)\n    console.log(category_id)\n    console.log(status)\n    const response = await axios.post(\n      \"http://localhost:8000/api/areas\",\n      {\n        category_id,name,status\n      }\n    )\n    dispatch({\n        type: POST_AREA_ADD,\n        payload: {\n            array: response.data\n        }\n        \n    }) \n\n  }catch (error){\n    console.log(error)\n  }\n\n\n}\n\n//deleteArea\nexport const  deleteArea = (id) => async (dispatch, getState) => {\n    try {\n        const response = await axios.delete(\n            `http://localhost:8000/api/areas/${id}`          \n        )\n        dispatch({\n            type: DELETE_AREA,\n            payload: {\n                array: id\n            }\n        }) \n    }catch (error){\n      console.log(error)\n    }\n}\n\n// updatedArea\nexport const updateArea = (id,category_id,name,status) => async (dispatch, getState) => {\n\n    try {\n        const response = await axios.put(\n        `http://localhost:8000/api/areas/${id}`, {category_id,name,status})\n            dispatch({\n            type: UPDATE_AREA,\n            payload: {\n                array: response.data\n            }\n        \n        }) \n\n    }catch (error){\n        console.log(error)\n    }\n\n}\n\n//Get Service con el id del client current\nexport const getCategArea = (id) => async (dispatch)  => {\n    try{\n        // const {offset} = getState().Service\n        const response = await axios.get(`http://localhost:8000/api/areas/categories/${id}`)\n        dispatch({\n            type: GET_AREA_CATEG,\n            payload: {\n                array: response.data\n            }\n        })  \n\n    }catch(error){\n        console.log(error)\n    }\n}","/var/www/html/coworkservices/src/redux/typeproductDuck.js",[],"/var/www/html/coworkservices/src/components/ClientEditForm.jsx",["121","122","123","124","125"],"import React, {Fragment,useState} from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { updateClient } from '../redux/clientDuck';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from '@material-ui/core/Button'\n\n\nconst ClientEditForm = (props) => {\n\n    \n    // console.log('currentCliente.name:')\n    // console.log(props.currentCliente.name)\n    // console.log('currentCliente.last_name:')\n    // console.log(props.currentCliente.last_name)\n    // console.log('Client:')\n    // console.log(props.client)\n\n    const dispatch = useDispatch()\n    // const clientcurrent = useSelector(store => store.client.array)\n\n    \n\n    const {values, setValue, control, register, errors, handleSubmit} = useForm({\n        defaultValues: props.currentCliente\n        // defaultValues: useMemo(() => {\n        //     return props.currentCliente;\n        //   }, [props])\n    });\n\n    // console.log(clientcurrent)\n    const [actualclient, setActualClient] = useState([]);\n\n    console.log('actualclient')\n    console.log(actualclient)\n    console.log('props')\n    console.log(props)\n    \n    // const handleChange = e => {\n    //     const {name, value} = e.target;\n    //     setUser({...user, [name]: value});\n    // }\n    // handleChange(event) {\n    //     this.setState({\n    //       text: event.target.value\n    //     });\n    //   };\n    // const handleChange = e => {\n    //     console.log('handleChange')\n    //     console.log(props)\n        // setValue('name', e.target.value);\n        // console.log(e.target)\n        // this.setState({\n        //     name: e.target.value\n        //   });\n        // setValue('name', props.currentCliente.name);\n        // setValue('last_name', props.currentCliente.last_name);\n        // setValue('dni', props.currentCliente.dni);\n        // setValue('address', props.currentCliente.address);\n        // setValue('email', props.currentCliente.email);\n    // }\n    // const handleChangeClick = e => {\n        // console.log('data')\n        // console.log(data)\n        // Detecta los cambios del input\n    //     console.log('name' in actualclient)\n    // if (typeof props.current !== 'undefined' && props.current !== null){\n    // if (props.current === true){\n    //     console.log('estoy setactualcliente es cero')\n    //     setActualClient([])\n    // }\n    if ('name' in actualclient){\n        console.log('dentro del if')\n        console.log(props.currentCliente)\n        \n        setValue('name', actualclient.name);\n        setValue('last_name', actualclient.last_name);\n        setValue('dni', actualclient.dni);\n        setValue('address', actualclient.address);\n        setValue('email', actualclient.email);\n        //console.log(setValue())\n        // setActualClient([])\n        \n    }else{\n        setValue('name', props.currentCliente.name);\n        setValue('last_name', props.currentCliente.last_name);\n        setValue('dni', props.currentCliente.dni);\n        setValue('address', props.currentCliente.address);\n        setValue('email', props.currentCliente.email);\n    }\n    // }\n\n    // const handleInputChange = (e) => {\n    //     const target = e.target;\n    //     console.log('handleChange')\n    //     console.log(target)\n    //     // const value = target.type === 'checkbox' ? target.checked : target.value;\n    //     // const name = target.name;\n    \n    //     // this.setState({\n    //     //   [name]: value\n    //     // });\n    //   }\n\n    \n\n\n    const onSubmit = (data, e) => {\n      \n        // props.addClient(props.currentCliente.id, data)\n        //props.addClient(props.cliente.id, data)\n        // data.id = props.currentClient.id\n        // props.updateClient(props.currentClient.id, data)\n            \n    \n            // data.id = props.currentCliente.id\n\n            console.log('Edit submit Client')\n            // console.log(props.currentCliente.id)\n            // console.log(this.state)\n\n            console.log(props)\n            console.log(data.name)\n            setActualClient(data)\n            props.setCurrentCliente(data)\n            // console.log(actualclient)\n            // props.updateClient(props.currentCliente.id, data)\n\n            // e.preventDefault()\n\n            // if (validate()){\n                // employeeService.insertEmployee(values)\n                dispatch(updateClient(props.currentCliente.id,data))\n                // resetForm()\n            // }\n            // dispatch(updateClient(props.currentCliente.id,data))\n            setActualClient([])\n            // setValue('name',data.name)\n            // props.setCurrentCliente(data)\n            //setValue('name', data.name);\n            // this.props.getClientId(props.currentCliente.id);\n            // limpiar campos\n            // e.target.reset();\n        //}\n        // limpiar campos\n        e.target.reset();\n    }\n    \n        // setTimeout(() => \n    //         // setValue('name', actualclient.name),\n    //         // setValue('name', actualclient.name),\n    //         // setValue('last_name', actualclient.last_name),\n    //         // setValue('dni', actualclient.dni),\n    //         // setValue('address', actualclient.address),\n    //         // setValue('email', actualclient.email)\n            // setValue('name', props.currentCliente.name),\n            // setValue('last_name', props.currentCliente.last_name),\n            // setValue('dni', props.currentCliente.dni),\n            // setValue('address', props.currentCliente.address),\n            // setValue('email', props.currentCliente.email)\n    //         //  setValue('name',123),\n    //         // setValue('last_name'),\n    //         // setValue('dni'),\n    //         // setValue('address'),\n    //         // setValue('email')\n        // );\n    // React.useEffect(() => {\n    //     console.log('llama a useEffect')\n    //     if ('name' in actualclient) {\n    //         setValue('name', actualclient.name);\n    //         setValue('name', actualclient.name);\n    //         setValue('last_name', actualclient.last_name);\n    //         setValue('dni', actualclient.dni);\n    //         setValue('address', actualclient.address);\n    //         setValue('email', actualclient.email);\n    //         // setValue([\n    //         //     { name: actualclient.name }, \n    //         //     { last_name: actualclient.last_name },\n    //         //     { dni: actualclient.dni }, \n    //         //     { address: actualclient.address },\n    //         //     { email: actualclient.email },\n    //         // ]);\n    //       }\n    //     //setActualClient([])\n\n    //   }, [actualclient]);\n    \n\n    //   React.useEffect(() => {\n    //     if (props.currentCliente) {\n    //         console.log('Edit')\n    //         console.log(props.currentCliente)\n    //     //   setValue([{ name: props.currentCliente.name }, \n    //     //     { last_name: props.currentCliente.last_name },\n    //     //     { last_name: props.currentCliente.last_name },\n    //     //     ]);\n    //         setValue('name', props.currentCliente.name);\n    //         setValue('last_name', props.currentCliente.last_name);\n    //         setValue('dni', props.currentCliente.dni);\n    //         setValue('address', props.currentCliente.address);\n    //         setValue('email', props.currentCliente.email);\n    //     }\n    //   }, [props.currentCliente]);  onChange={this.clientcurrent}\n    //     defaultValue={props.currentCliente ? props.currentCliente.name : ''}\n    //{this.handleChangeFirstName.bind(this)}\n                            // onChange={handleChange()}\n    // onChange={(event) => this.handleChange(event)}\n\n    return (\n        <Fragment>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"input-group\">\n                    <span className=\"input-group-text\">First and last name</span>\n                    {/* <Controller\n                        as={<input type='text' />}\n                        control={control}\n                        defaultValue={actualclient ? actualclient.name : ''}\n                        name='name'\n                    /> */}\n                     <input type=\"text\" aria-label=\"First name\" \n                    name=\"name\" id=\"name\" htmlFor=\"name\"\n                    className=\"form-control\" placeholder=\"Add name client\" \n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Name es requerido'\n                            }\n                    })}\n                    />\n                    <input type=\"text\" aria-label=\"Last name\" name=\"last_name\" id=\"last_name\"\n                    className=\"form-control\" placeholder=\"Add last name client\"\n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Last name es requerido'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.name?.message}\n                    </span>\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.last_name?.message}\n                    </span>\n                </div>\n                <div>\n                    \n                <input \n                    placeholder=\"Ingrese DNI\"\n                    type=\"text\" \n                    name=\"dni\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[0-9]+$/, \n                            message: 'DNI es requerido, debe ser numerico'\n                            }\n                    })}\n                    />\n                \n                <input \n                    placeholder=\"Provider Address\"\n                    type=\"text\" \n                    name=\"address\"\n                    ref={register({\n                        required: \"Required\"\n                    })}\n                    />\n                </div> \n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.dni && errors.dni.message}\n                    </span>\n                </div>\n                <div className=\"mb-3\">\n                    <input placeholder=\"Email address\" type=\"email\" className=\"form-control\" \n                    id=\"InputEmail\"  name=\"email\" \n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\"\n                        }\n                      })}\n                    />\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.email && errors.email.message}\n                    </span>\n                </div>\n                <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n                Edit client\n                </Button>\n            </form>\n        </Fragment>\n    );\n}\nexport default ClientEditForm;","/var/www/html/coworkservices/src/components/ClientTable.jsx",["126","127"],"import React from 'react';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { deleteClient,getClient } from '../redux/clientDuck';\nimport Button from '@material-ui/core/Button'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\n\nconst ClientTable = (props) => {\n\n    //const [listClient, setListClient] = useState([]);\n\n    // console.log('props de ClientTable:')\n    // console.log(props)\n    const dispatch = useDispatch()\n\n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n        // Swal.fire('Any fool can use a computer')\n        // dispatch(deleteClient(cliente.id))\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteClient(id))\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your client ${name} ${lastname} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n\n    }\n\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th># DNI</th>\n                <th>Client name</th>\n                <th>Lastname</th>\n                <th>Address</th>\n                <th>Email</th>\n                <th>Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                props.cliente.length > 0 ?\n                  props.cliente.map(cliente  => (\n                        <tr key={cliente.id}>\n                        <td>{cliente.dni}</td>\n                        <td>{cliente.name}</td>\n                        <td>{cliente.last_name}</td>\n                        <td>{cliente.address}</td>\n                        <td>{cliente.email}</td>\n                        <td>\n                            <Button variant=\"outlined\" color=\"primary\"\n                                onClick={\n                                    () => {props.editRow(cliente)}\n                                }\n                            >\n                              Edit\n                            </Button>\n                            <Button variant=\"contained\" color=\"secondary\"\n                                onClick={() => HandleButtonDelete(cliente.id,cliente.name,cliente.last_name)}\n                                startIcon={<DeleteIcon/>}\n                            >\n                            Delete\n                            </Button>\n                            \n                        </td>\n                    </tr>\n                    )) : (\n                \n                        <tr>\n                        <td colSpan={3}>No cliente</td>\n                        </tr>\n                    )\n            }\n            </tbody>\n        </table>\n     );\n    \n}\n\nexport default ClientTable;\n","/var/www/html/coworkservices/src/components/ClientAddForm.jsx",["128"],"//rafc\nimport React, {Fragment}  from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector} from 'react-redux';\n// import { getClient, getNextClient} from '../redux/clientDuck';\nimport { addClient } from '../redux/clientDuck';\n\nconst ClientAddForm = (props) => {\n    // console.log('ADdClients')\n    // console.log(props)\n    const {register, errors, handleSubmit} = useForm();\n    const dispatch = useDispatch()\n\n    // React.useEffect(() => {\n    //     const obtenerInfo = () => {\n    //         dispatch(getClient())\n    //     }\n    //     obtenerInfo()\n    // }, [dispatch])\n\n    \n\n    // props.setCliente(...props.cliente,\n    //     clientData)\n    // console.log('clientData')\n    // console.log(clientData)\n\n    \n    const onSubmit = (data, e) => {\n        // console.log('Add submit data')\n        // console.log(data)\n        // console.log(data.name,data.last_name,data.dni,data.email)\n        // props.addClient(data.name,data.last_name,data.dni,data.address,data.email)\n        dispatch(addClient(data.name,data.last_name,data.dni,data.address,data.email))\n        // props.setCliente([\n        //       ...props.cliente, \n        //       data.data\n        //     ])\n        // limpiar campos\n        e.target.reset();\n    }\n\n    return (\n        <Fragment>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"input-group\">\n                    <span className=\"input-group-text\">First and last name</span>\n                    <input type=\"text\" aria-label=\"First name\" \n                    name=\"name\" id=\"name\" htmlFor=\"name\"\n                    className=\"form-control\" placeholder=\"Add name client\" \n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Name es requerido'\n                            }\n                    })}\n                    />\n                    <input type=\"text\" aria-label=\"Last name\" name=\"last_name\" id=\"last_name\"\n                    className=\"form-control\" placeholder=\"Add last name client\"\n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Last name es requerido'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.name?.message}\n                    </span>\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.last_name?.message}\n                    </span>\n                </div>\n                <div>\n                <input \n                    placeholder=\"Ingrese DNI\"\n                    type=\"text\" \n                    name=\"dni\"\n                    id=\"dni\"\n                    className=\"form-control\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[0-9]+$/, \n                            message: 'DNI es requerido, debe ser numerico'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.dni && errors.dni.message}\n                    </span>\n                </div>\n                <div>\n                <input \n                    placeholder=\"Provider Address\"\n                    type=\"text\" id=\"address\"\n                    name=\"address\" className=\"form-control\"\n                    ref={register({\n                        required: \"Required\"\n                    })}\n                />\n                </div>\n                <div className=\"mb-3\">\n                    <input placeholder=\"Email address\" \n                    type=\"email\" className=\"form-control\" \n                    id=\"InputEmail\" aria-describedby=\"emailHelp\" name=\"email\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\"\n                        }\n                      })}\n                    />\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.email && errors.email.message}\n                    </span>\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\n                </div>\n                <button type=\"submit\" >Add Client</button>\n            </form>\n        </Fragment>\n    );\n}\nexport default ClientAddForm;\n","/var/www/html/coworkservices/src/components/Associate.jsx",["129"],"import React,{useState, Fragment, useEffect} from 'react'\nimport { useDispatch, useSelector} from 'react-redux';\nimport { getAssociate, addAssociate, deleteAssociate, updateAssociate } from '../redux/associateDuck';\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Swal from 'sweetalert2';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(2),\n      minWidth: 220,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(3),\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\nconst Associate = () => {\n    const classes = useStyles();\n    //-------------------------------------------\n    const [asociados, setAsociados] = useState([])\n    const [modoEdicion, setModoEdicion] = useState(false)\n    const [refreshKey, setRefreshKey] = useState(0)\n    const [gender, setGender] = useState(0)\n    const asociado = useSelector(store => store.associate.array)\n    const {setValue, register, reset, errors, handleSubmit} = useForm({defaultValues: asociado});\n    const dispatch = useDispatch()\n    const genero = [{id: 1, name:'Masculino'},{id: 2, name:'Femenino'}];\n    \n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteAssociate(id,name,lastname));\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your Associate ${name} ${lastname} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n\n    }\n    \n    const handleChangeGender = (event) => {\n        setGender(event.target.value)\n    }\n\n    const eliminarAsociado = (id,name,last_name) => {\n        HandleButtonDelete(id,name,last_name)\n    }\n\n    const editar = items => {\n        setGender(items.gender)\n        reset(items)\n        setModoEdicion(true)\n    }\n\n    useEffect(() => {\n        dispatch(getAssociate());\n    },[refreshKey])\n\n    const onSubmit = (data, e) => {\n\n        if(!data.name.trim()){\n            return\n        }\n        setAsociados([\n            ...asociados,\n            {name: data.name,\n            last_name: data.last_name,\n            dni: data.dni,\n            address: data.address,\n            gender: gender,\n            email: data.email}\n        ])\n\n        setValue('name', data.name);\n        setValue('last_name', data.last_name);\n        setValue('dni', data.dni);\n        setValue('address', data.address);\n        setValue('email', data.email);\n        setValue('gender', gender);\n        setRefreshKey(oldKey => oldKey +1)\n        \n        if (modoEdicion){\n            dispatch(updateAssociate(data.id,data.name.toLocaleUpperCase(),data.last_name.toLocaleUpperCase(),data.dni,data.address,data.email,gender));\n            setModoEdicion(false)\n\n        }else{\n            dispatch(addAssociate(data.name,data.last_name,data.dni,data.address,data.email,gender));\n        }\n        dispatch(getAssociate());\n        setGender(-1)\n        \n        // limpiar campos\n        e.target.reset();\n    }\n    return (\n        <Fragment>\n            <div className=\"container mt-5\">\n            <h1 className=\"text-center\">Associates</h1>\n            <hr/>\n            <div className=\"row\">\n                <div className=\"col-7\">\n                <h4 className=\"text-center\">Lista de Asociados</h4>\n                <ul className=\"list-group\">\n                    {\n                        asociado.length === 0 ? (\n                            <li className=\"list-group-item\">Sin Asociados</li>\n                        ) : (\n                            asociado.map(items => (\n                                <li className=\"list-group-item\" key={items.id}>\n                                <span className=\"lead\">{items.name} {items.last_name} {items.email}</span>\n                                <Button variant=\"contained\" color=\"secondary\"\n                                className=\"btn btn-sm btn-danger float-right mx-2\"\n                                onClick={() => eliminarAsociado(items.id,items.name,items.last_name)\n                                }\n                                startIcon={<DeleteIcon/>}\n                                >\n                                Delete\n                                </Button>\n                                <Button variant=\"outlined\" color=\"primary\"\n                                className=\"btn btn-sm btn-danger float-right mx-2\"\n                                onClick={\n                                    () => editar(items) \n                                }\n                                >Edit\n                                </Button>\n                                </li>\n                            ))\n                        )\n                    }\n                </ul>\n            </div>\n            <div className=\"col-5\">\n                    <h4 className=\"text-center\">\n                        {\n                        modoEdicion ? 'Editar Asociado' : 'Agregar Asociado'\n                        }\n                    </h4>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <div>\n                        <input \n                            type=\"hidden\" \n                            className=\"form-control mb-2\"\n                            name=\"id\" id=\"id\"\n                            ref={register()}\n                        />\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Name Associate\"\n                                    name=\"name\" id=\"name\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Name es requerido'\n                                            }\n                                    })}\n                                />\n                                <div>\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.name?.message}\n                                </span>\n                                </div>\n                            </div>\n                            <div className=\"col-6\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Last Name Associate\"\n                                    name=\"last_name\" id=\"last_name\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Last name es requerido'\n                                            }\n                                    })}\n                                />\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.last_name?.message}\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Address\"\n                                    name=\"address\" id=\"address\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Address es requerido'\n                                            }\n                                    })}\n                                />\n                                <div>\n                                    <span className=\"text-danger text-small d-block mb-2\">\n                                        {errors?.address?.message}\n                                    </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-category\">Gender</InputLabel>\n                                    <Select\n                                      labelId=\"select_gender_label\"\n                                      id=\"select_gender\"\n                                    //   value={category}    \n                                      value={gender === -1 ? '' : gender}\n                                      onChange={handleChangeGender}\n                                    >\n                                    {\n                                      genero.map((g, index) => (\n                                        <MenuItem  key={index} value={g.id}>\n                                          {g.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.gender?.message}\n                                </span>\n                            </div>\n                            <div className=\"col-12\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Email\"\n                                    name=\"email\" id=\"email\"\n                                    ref={register({\n                                        required: \"Required\",\n                                        pattern: {\n                                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                          message: \"Invalid email address\"\n                                        }\n                                    })}\n                                />\n                                <div>\n                                    <span className=\"text-danger text-small d-block mb-2\">\n                                        {errors?.email?.message}\n                                    </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        \n                        </div>  \n                        {\n                        modoEdicion ? (\n                            <button className=\"btn btn-warning btn-block\" type=\"submit\">Editar</button>\n                        ) : (\n                            <button className=\"btn btn-dark btn-block\" type=\"submit\">Agregar</button>\n                        )\n                        }\n                    </form>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Associate\n","/var/www/html/coworkservices/src/components/ServicesTable.jsx",["130","131","132","133","134","135","136","137","138","139"],"import React, {useState, useEffect } from 'react';\nimport { format, formatDistance, formatRelative, subDays } from 'date-fns'\n// import { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nimport { deleteService } from '../redux/serviceDuck';\nimport { getTypeProducts } from '../redux/typeproductDuck';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { Modal,Container,Row,Col } from 'react-bootstrap';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker,} from '@material-ui/pickers';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme, TextField } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useForm } from 'react-hook-form';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 220,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(3),\n  },\n  // root: {\n  //   width: '100%',\n  //   maxWidth: 500,\n  //   backgroundColor: theme.palette.background.paper,\n  // },\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nconst ServicesTable = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch()\n\n  const typeproduct = useSelector(store => store.area.array)\n\n  const [modalShow, setModalShow] = useState(false);\n  const [errorTypeProduct,setErrorTypeProduct] = useState(false);\n  const [tipoproduct, setTipoProduct] = useState('');\n\n  const { register, setValue, reset, handleSubmit, errors, control } = useForm();\n\n  // const service = useSelector(store => store.service.array)\n  // const [idServiceAssocDel, setIdServiceAssocDel] = useState([])\n  \n\n  // useEffect(() => {\n\n  //   console.log('setIdServiceAssocDel.......................')\n  //   console.log(idServiceAssocDel)\n  //   console.log(idServiceAssocDel.id)\n  //   console.log(idServiceAssocDel.key)\n  //   dispatch(getServiceAssoc(idServiceAssocDel.id))\n  // },[idServiceAssocDel.key])\n\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'btn btn-success',\n      cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n\n  const HandleButtonDelete = (id,name,client_id) =>{\n\n    swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You won't be able to revert this!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, delete it!',\n        cancelButtonText: 'No, cancel!',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.isConfirmed) {\n            dispatch(deleteService(id))\n            dispatch(props.getServiceAssoc(client_id))\n            props.setIdServiceAssoc({id:client_id,key:Math.random()})\n            \n            // setIdServiceAssocDel(client_id)\n            // setIdServiceAssocDel({id: client_id, key: Math.random()})\n\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            `Your Service ${name} has been deleted.`,\n            'success'\n          )\n        } else if (\n          /* Read more about handling dismissals below */\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled'\n          )\n        }\n      })\n  }\n\n  const eliminarService = (id,name,client_id) => {\n    console.log('delete+++')\n    console.log(client_id)\n    console.log(name)\n    console.log(id)\n    HandleButtonDelete(id,name,client_id)\n  }\n\n\n  const HandleChangeTypeProduct = (event) => {\n    console.log('HandleChangeTypeProduct:')\n    console.log(event.target.value)\n    setErrorTypeProduct(true)\n    setTipoProduct(Number(event.target.value))\n\n    dispatch(getTypeProducts());\n\n  }\n\n  const AddModalProduct = (props) => {\n\n    \n    setValue('service_id',props.service_id)\n    \n    useEffect(() =>{\n      dispatch(getTypeProducts());\n\n      console.log('---AddModalProduct---')\n      console.log(typeproduct)\n      console.log(props)\n    },[]);\n\n    \n    \n    return (\n\n      <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add Product\n           { \n           \n           console.log(props.service_id)\n           }\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"show-grid\">\n          <Container>\n            <Row>\n              <Col xs={18} md={12}>\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"select-label-type-products\">Responsible type products</InputLabel>\n                  <Select\n                    labelId=\"select_type_products_label\"\n                    id=\"select_typeproduct\"\n                    value={tipoproduct === -1 ? '' : tipoproduct}\n                    onChange={HandleChangeTypeProduct}\n                    error={tipoproduct === '' && errorTypeProduct ===true}\n                  >\n                  {\n                    typeproduct.map((tprod, index) => (\n                      <MenuItem key={index} value={tprod.id}>\n                        {console.log(tprod)}\n                        {tprod.name}\n                      </MenuItem>\n                    ))\n                  }\n                  </Select>\n              </FormControl>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={18} md={12}>\n              <TextField\n                id=\"name_products\"\n                label=\"Description Product\"\n                multiline\n                fullWidth\n                rows={3}\n                defaultValue=\"Default Value\"\n                variant=\"outlined\"\n              />\n              </Col>\n\n            </Row>\n  \n            <Row>\n              <Col xs={6} md={4}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date_start\"\n                  label=\"Date Start\"\n                  // value={selectedDate}\n                  // onChange={handleDateChange}\n                  // error={selectedDate === '' ??  false}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n              </Col>\n              <Col xs={6} md={4}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date_end\"\n                  label=\"Date End\"\n                  // value={selectedDate}\n                  // onChange={handleDateChange}\n                  // error={selectedDate === '' ??  false}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n              </Col>\n              <Col xs={6} md={4}>\n              <input type=\"text\" \n                name=\"services_id\" id=\"services_id\" htmlFor=\"services_id\"\n                className=\"form-control\" ref ={register} \n              />\n              </Col>\n            </Row>\n          </Container>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={props.onHide}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n    \n    return (\n      <table>\n          <thead>\n          <tr>\n              <th>Associate</th>\n              <th>Category</th>\n              <th>Area</th>\n              <th>Date service</th>\n              <th>Gross Amount</th>\n              <th>Actions</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n               props.serviceassoc.length > 0 ?\n               props.serviceassoc.map( (servi,idx)  => (\n                      <tr key={servi.id}>\n                      <td>{servi.name_associates}</td>\n                      <td>{servi.name_categories}</td>\n                      <td>{servi.name_areas}</td>\n                      <td>{servi.date_service}</td>\n                      <td>{servi.gross_amount}</td>\n                      <td>\n                      \n                          <>\n                            <Button variant=\"primary\" onClick={() => setModalShow(true)}>\n                              Products\n                            </Button>\n\n                            <AddModalProduct show={modalShow} \n                              id={servi.id} \n                              areas_id={servi.areas_id} \n                              associate_id={servi.associate_id} \n                              category_id={servi.category_id} \n                              client_id={servi.client_id} \n                              date_service={servi.date_service} \n                              onHide={() => setModalShow(false)} \n                            \n                            />\n                          </>\n                          <Button variant=\"outlined\" color=\"primary\"\n                              onClick={\n                                  () => {props.editRow(servi)}\n                              }\n                          >\n                            Edit\n                          </Button>\n                          <Button variant=\"contained\" color=\"secondary\"\n                              onClick={() => \n                                eliminarService(servi.id,servi.name_areas,servi.client_id)\n                              //   // HandleButtonDelete(servi.id,servi.name,servi.last_name)\n                              }\n                              startIcon={<DeleteIcon/>}\n                          >\n                          Delete\n                          </Button>\n                          \n                      </td>\n                  </tr>\n                  )) : (\n              \n                      <tr>\n                      <td colSpan={3}>No service</td>\n                      </tr>\n                  )\n          }\n          </tbody>\n      </table>\n   );\n}\nexport default ServicesTable;\n","/var/www/html/coworkservices/src/components/Area.jsx",["140","141"],"import React,{useState, Fragment, useEffect} from 'react'\nimport { useDispatch, useSelector} from 'react-redux';\nimport { addArea, deleteArea, updateArea, getCategArea } from '../redux/areaDuck';\nimport { getCategory } from '../redux/categoryDuck';\nimport { getStatus } from '../redux/typestatusDuck'\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(2),\n      minWidth: 220,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(3),\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\n  \n\nconst Area = () => {\n\n    const classes = useStyles();\n\n    //-------------------------------------------\n    const [modoEdicion, setModoEdicion] = useState(false)\n    const [refreshKey, setRefreshKey] = useState(0);\n    const area = useSelector(store => store.area.array)\n    const showstatus = useSelector(store => store.showstatus.array)\n    const category = useSelector(store => store.category.array)\n    const {setValue, register, reset, errors, handleSubmit} = useForm({defaultValues: area});\n    const dispatch = useDispatch()\n    const [categorias, setCategorias] = useState('');\n    const [name, setName] = useState('');\n    const [status, setStatus] = useState(0);\n    const [error, setError] = useState(false)\n    const [errorStatus, setErrorStatus] = useState(false)\n    const [errorCategory, setErrorCategory] = useState(false)\n\n    \n    //Controla la seleccionde la Category\n    const handleChangeCategory = (event) => {\n        setErrorCategory(false)\n        setCategorias(Number(event.target.value))\n    };\n\n    const handleChangeName = (event) => {\n        setError(false)\n        setName(event.target.value.toLocaleUpperCase())\n    }\n\n    const handleChangeStatus = (event) => {\n        setErrorStatus(false)\n        setStatus(event.target.value)\n    };\n\n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n    })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteArea(id,name));\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your Area ${name} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n    }\n    \n\n    const eliminarArea = (id,name,last_name) => {\n        HandleButtonDelete(id,name,last_name)\n    }\n\n    const editar = items => {\n        setCategorias(items.category_id)\n        setStatus(items.status)\n        setName(items.name)\n        reset(items)\n        setModoEdicion(true)\n    }\n\n\n    useEffect(() => {\n      // console.log('llamado a getCategArea')\n      // console.log(areas)\n      dispatch(getCategArea());\n    },[refreshKey])\n\n    useEffect(() => {\n        dispatch(getCategory());\n        dispatch(getStatus());\n      }, []);\n\n    const onSubmit = (data, e) => {\n      \n\n        if (!categorias || categorias.length === 0){\n            setErrorCategory(true)\n            return\n        }\n        if(!name.length){\n            setError(true)\n            return\n        }\n        if(!status || status.length === 0){\n          setErrorStatus(true)\n          return\n        }\n\n        // console.log('onSubmit') !name.trim()\n        \n        // console.log(data.id,name,categorias,status)\n\n        // let aareas = areas.map( a => {\n        //   if (a.id === data.id){\n        //       let v = {id:data.id,category_id: categorias,name: name,status:status}\n        //       return {...a, v};\n        //     } else {\n        //       return a;\n        //     }\n        // });\n\n        // console.log(aareas)\n        // setAreas(aareas)\n        // setAreas([\n        //     ...areas,\n        //     {id: data.id,\n        //     name: name,\n        //     category_id: categorias,\n        //     status: status}\n        // ])\n        setValue('id', data.id);\n        setValue('name', name);\n        setValue('category_id', categorias);\n        setValue('status', status);\n        \n        \n        if (modoEdicion){\n            dispatch(updateArea(data.id,categorias,name,status));\n            setModoEdicion(false)\n            \n        }else{\n            dispatch(addArea(categorias,name,status));\n        }\n        dispatch(getCategArea());\n        setCategorias(-1)\n        setName(-1)\n        setStatus(-1)\n        setRefreshKey(oldKey => oldKey + 1)\n        setError(false)\n        setErrorStatus(false)\n\n        // limpiar campos\n        e.target.reset();\n    }\n    return (\n        <Fragment>\n            <div className=\"container mt-5\">\n            <h1 className=\"text-center\">Areas</h1>\n            <hr/>\n            <div className=\"row\">\n                <div className=\"col-7\">\n                <h4 className=\"text-center\">Lista de Areas</h4>\n                <ul className=\"list-group\">\n                  <li className=\"lead left-0\">Category - Area</li>\n                    {\n                      area.length === 0 ? (\n                          <li className=\"list-group-item\">Sin Areas</li>\n                      ) : (\n                        area.map(items => items.status === 1 ? \n                              (<li className=\"list-group-item\" key={items.id}>\n                                <span className=\"lead\" >{items.name_categories} - {items.name}</span>\n                                  \n                              <Button variant=\"contained\" color=\"secondary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={() => eliminarArea(items.id,items.name,items.category_id)\n                              }\n                              startIcon={<DeleteIcon/>}\n                              >\n                              Delete\n                              </Button>\n                              <Button variant=\"outlined\" color=\"primary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={\n                                  () => editar(items) \n                              }\n                              >Edit\n                              </Button>\n                              </li>\n                              ):(\n                              <li className=\"list-group-item\" style={{backgroundColor:'#EEE8AA'}} key={items.id}>\n                              <span className=\"lead\" >{items.name_categories} - {items.name}</span>\n                                \n                              <Button variant=\"contained\" color=\"secondary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={() => eliminarArea(items.id,items.name,items.category_id)\n                              }\n                              startIcon={<DeleteIcon/>}\n                              >\n                              Delete\n                              </Button>\n                              <Button variant=\"outlined\" color=\"primary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={\n                                  () => editar(items) \n                              }\n                              >Edit\n                              </Button>\n                              </li>)    \n                        ))\n                    }\n                </ul>\n            </div>\n            <div className=\"col-5\">\n                    <h4 className=\"text-center\">\n                        {\n                        modoEdicion ? 'Editar Area' : 'Agregar Area'\n                        }\n                    </h4>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <div>\n                        <input \n                            type=\"hidden\" \n                            className=\"form-control mb-2\"\n                            name=\"id\" id=\"id\"\n                            ref={register()}\n                        />\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-category\">Category</InputLabel>\n                                    <Select\n                                      labelId=\"select_category_label\"\n                                      id=\"select_category\"\n                                      value={categorias === -1 ? '' : categorias}\n                                      onChange={handleChangeCategory}\n                                      error={categorias === '' && errorCategory ===true}\n                                      // helperText={categorias === 0 ? 'Empty field!' : ' '}\n                                    >\n                                    {\n                                      category.map((categ, index) => (\n                                        <MenuItem  key={index} value={categ.id}>\n                                          {categ.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <TextField \n                                  id=\"name\"  \n                                  name=\"name\" multiline={true}\n                                  rows={2}\n                                  fullWidth={true}\n                                  style = {{width: 300}}\n                                  label=\"Area Name\" \n                                  variant=\"outlined\" \n                                  value={name === -1 ? '' :name}\n                                  onChange={handleChangeName}\n                                  error={name === \"\" && error ===true}\n                                  helperText={name === \"\" ? 'Empty field!' : ' '}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-status\">Status</InputLabel>\n                                    <Select\n                                      labelId=\"select_status_label\"\n                                      id=\"select_status\"   \n                                      value={status === -1 ? '' : status}\n                                      onChange={handleChangeStatus}\n                                      error={status === 0 && errorStatus ===true}\n                                      // helperText={status === 0 ? 'Empty field!' : ' '}\n                                    >\n                                    {\n                                      showstatus.map((st, index) => (\n                                        <MenuItem  key={index} value={st.id}>\n                                          {st.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <div>\n                                  <span className=\"text-danger text-small d-block mb-2\">\n                                      {errors?.select_status?.message}\n                                  </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        \n                        </div>  \n                        {\n                        modoEdicion ? (\n                            <button className=\"btn btn-warning btn-block\" type=\"submit\">Editar</button>\n                        ) : (\n                            <button className=\"btn btn-dark btn-block\" type=\"submit\">Agregar</button>\n                        )\n                        }\n                    </form>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Area\n",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":17,"column":12,"nodeType":"148","messageId":"149","endLine":17,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":44,"column":8,"nodeType":"152","endLine":44,"endColumn":20,"suggestions":"153"},{"ruleId":"146","severity":1,"message":"154","line":12,"column":47,"nodeType":"148","messageId":"149","endLine":12,"endColumn":61},{"ruleId":"146","severity":1,"message":"155","line":63,"column":12,"nodeType":"148","messageId":"149","endLine":63,"endColumn":19},{"ruleId":"146","severity":1,"message":"156","line":85,"column":12,"nodeType":"148","messageId":"149","endLine":85,"endColumn":21},{"ruleId":"150","severity":1,"message":"157","line":135,"column":8,"nodeType":"152","endLine":135,"endColumn":10,"suggestions":"158"},{"ruleId":"150","severity":1,"message":"159","line":191,"column":7,"nodeType":"152","endLine":191,"endColumn":19,"suggestions":"160"},{"ruleId":"150","severity":1,"message":"161","line":200,"column":7,"nodeType":"152","endLine":200,"endColumn":27,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":447,"column":54,"nodeType":"165","messageId":"166","endLine":447,"endColumn":55,"suggestions":"167"},{"ruleId":"146","severity":1,"message":"168","line":163,"column":15,"nodeType":"148","messageId":"149","endLine":163,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":140,"column":15,"nodeType":"148","messageId":"149","endLine":140,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":145,"column":15,"nodeType":"148","messageId":"149","endLine":145,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":188,"column":15,"nodeType":"148","messageId":"149","endLine":188,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":145,"column":15,"nodeType":"148","messageId":"149","endLine":145,"endColumn":23},{"ruleId":"146","severity":1,"message":"168","line":148,"column":15,"nodeType":"148","messageId":"149","endLine":148,"endColumn":23},{"ruleId":"146","severity":1,"message":"169","line":2,"column":19,"nodeType":"148","messageId":"149","endLine":2,"endColumn":29},{"ruleId":"146","severity":1,"message":"170","line":3,"column":23,"nodeType":"148","messageId":"149","endLine":3,"endColumn":34},{"ruleId":"146","severity":1,"message":"171","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":17},{"ruleId":"146","severity":1,"message":"172","line":24,"column":12,"nodeType":"148","messageId":"149","endLine":24,"endColumn":18},{"ruleId":"146","severity":1,"message":"173","line":24,"column":30,"nodeType":"148","messageId":"149","endLine":24,"endColumn":37},{"ruleId":"146","severity":1,"message":"170","line":2,"column":23,"nodeType":"148","messageId":"149","endLine":2,"endColumn":34},{"ruleId":"146","severity":1,"message":"174","line":3,"column":23,"nodeType":"148","messageId":"149","endLine":3,"endColumn":32},{"ruleId":"146","severity":1,"message":"170","line":4,"column":23,"nodeType":"148","messageId":"149","endLine":4,"endColumn":34},{"ruleId":"150","severity":1,"message":"157","line":98,"column":7,"nodeType":"152","endLine":98,"endColumn":19,"suggestions":"175"},{"ruleId":"146","severity":1,"message":"176","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":16},{"ruleId":"146","severity":1,"message":"177","line":2,"column":18,"nodeType":"148","messageId":"149","endLine":2,"endColumn":32},{"ruleId":"146","severity":1,"message":"178","line":2,"column":34,"nodeType":"148","messageId":"149","endLine":2,"endColumn":48},{"ruleId":"146","severity":1,"message":"179","line":2,"column":50,"nodeType":"148","messageId":"149","endLine":2,"endColumn":57},{"ruleId":"146","severity":1,"message":"154","line":17,"column":47,"nodeType":"148","messageId":"149","endLine":17,"endColumn":61},{"ruleId":"146","severity":1,"message":"180","line":55,"column":31,"nodeType":"148","messageId":"149","endLine":55,"endColumn":36},{"ruleId":"146","severity":1,"message":"181","line":55,"column":38,"nodeType":"148","messageId":"149","endLine":55,"endColumn":50},{"ruleId":"146","severity":1,"message":"182","line":55,"column":52,"nodeType":"148","messageId":"149","endLine":55,"endColumn":58},{"ruleId":"146","severity":1,"message":"173","line":55,"column":60,"nodeType":"148","messageId":"149","endLine":55,"endColumn":67},{"ruleId":"150","severity":1,"message":"183","line":143,"column":7,"nodeType":"152","endLine":143,"endColumn":9,"suggestions":"184"},{"ruleId":"150","severity":1,"message":"157","line":129,"column":7,"nodeType":"152","endLine":129,"endColumn":19,"suggestions":"185"},{"ruleId":"150","severity":1,"message":"157","line":134,"column":10,"nodeType":"152","endLine":134,"endColumn":12,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'cliente' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'createMuiTheme' is defined but never used.","'editing' is assigned a value but never used.","'errorDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'client' and 'dispatch'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has missing dependencies: 'dispatch' and 'idServiceAssoc.id'. Either include them or remove the dependency array.",["192"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["193","194"],"'response' is assigned a value but never used.","'Controller' is defined but never used.","'useSelector' is defined but never used.","'TextField' is defined but never used.","'values' is assigned a value but never used.","'control' is assigned a value but never used.","'getClient' is defined but never used.",["195"],"'format' is defined but never used.","'formatDistance' is defined but never used.","'formatRelative' is defined but never used.","'subDays' is defined but never used.","'reset' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["196"],["197"],["198"],"no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"messageId":"207","fix":"208","desc":"209"},{"messageId":"210","fix":"211","desc":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"213","fix":"217"},{"desc":"201","fix":"218"},"Update the dependencies array to be: [dispatch, setCliente]",{"range":"219","text":"220"},"Update the dependencies array to be: [dispatch]",{"range":"221","text":"222"},"Update the dependencies array to be: [client, dispatch, searchTerm]",{"range":"223","text":"224"},"Update the dependencies array to be: [dispatch, idServiceAssoc.id, idServiceAssoc.key]",{"range":"225","text":"226"},"removeEscape",{"range":"227","text":"228"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"229","text":"230"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [dispatch, refreshKey]",{"range":"231","text":"232"},"Update the dependencies array to be: [props]",{"range":"233","text":"234"},{"range":"235","text":"232"},{"range":"236","text":"222"},[1445,1457],"[dispatch, setCliente]",[4973,4975],"[dispatch]",[6448,6460],"[client, dispatch, searchTerm]",[6667,6687],"[dispatch, idServiceAssoc.id, idServiceAssoc.key]",[18786,18787],"",[18786,18786],"\\",[3170,3182],"[dispatch, refreshKey]",[4362,4364],"[props]",[4014,4026],[4124,4126]]