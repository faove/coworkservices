[{"/var/www/html/coworkservices/src/index.js":"1","/var/www/html/coworkservices/src/App.jsx":"2","/var/www/html/coworkservices/src/redux/store.js":"3","/var/www/html/coworkservices/src/components/Client.jsx":"4","/var/www/html/coworkservices/src/components/Setting.jsx":"5","/var/www/html/coworkservices/src/components/Services.jsx":"6","/var/www/html/coworkservices/src/components/Dashboard.jsx":"7","/var/www/html/coworkservices/src/redux/serviceAssocDuck.js":"8","/var/www/html/coworkservices/src/redux/clientDuck.js":"9","/var/www/html/coworkservices/src/redux/associateDuck.js":"10","/var/www/html/coworkservices/src/redux/typestatusDuck.js":"11","/var/www/html/coworkservices/src/redux/categoryDuck.js":"12","/var/www/html/coworkservices/src/redux/serviceDuck.js":"13","/var/www/html/coworkservices/src/redux/productDuck.js":"14","/var/www/html/coworkservices/src/redux/areaDuck.js":"15","/var/www/html/coworkservices/src/redux/typeproductDuck.js":"16","/var/www/html/coworkservices/src/components/ClientEditForm.jsx":"17","/var/www/html/coworkservices/src/components/ClientTable.jsx":"18","/var/www/html/coworkservices/src/components/ClientAddForm.jsx":"19","/var/www/html/coworkservices/src/components/Associate.jsx":"20","/var/www/html/coworkservices/src/components/ServicesTable.jsx":"21","/var/www/html/coworkservices/src/components/Area.jsx":"22"},{"size":219,"mtime":1618161840668,"results":"23","hashOfConfig":"24"},{"size":2267,"mtime":1618161840664,"results":"25","hashOfConfig":"24"},{"size":1083,"mtime":1618161840668,"results":"26","hashOfConfig":"24"},{"size":3802,"mtime":1618161840664,"results":"27","hashOfConfig":"24"},{"size":2662,"mtime":1618161840668,"results":"28","hashOfConfig":"24"},{"size":20650,"mtime":1618162634106,"results":"29","hashOfConfig":"24"},{"size":162,"mtime":1618161840668,"results":"30","hashOfConfig":"24"},{"size":846,"mtime":1618161840668,"results":"31","hashOfConfig":"24"},{"size":5737,"mtime":1619219486501,"results":"32","hashOfConfig":"24"},{"size":4578,"mtime":1619219455457,"results":"33","hashOfConfig":"24"},{"size":939,"mtime":1618161840668,"results":"34","hashOfConfig":"24"},{"size":4350,"mtime":1619219471517,"results":"35","hashOfConfig":"24"},{"size":5821,"mtime":1619219537277,"results":"36","hashOfConfig":"24"},{"size":4502,"mtime":1619219518337,"results":"37","hashOfConfig":"24"},{"size":4942,"mtime":1619219393341,"results":"38","hashOfConfig":"24"},{"size":976,"mtime":1618755706369,"results":"39","hashOfConfig":"24"},{"size":11343,"mtime":1618161840668,"results":"40","hashOfConfig":"24"},{"size":3517,"mtime":1618161840668,"results":"41","hashOfConfig":"24"},{"size":4906,"mtime":1618161840668,"results":"42","hashOfConfig":"24"},{"size":12804,"mtime":1619219916236,"results":"43","hashOfConfig":"24"},{"size":10630,"mtime":1619219008950,"results":"44","hashOfConfig":"24"},{"size":13562,"mtime":1618163178116,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"p3gtw2",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},"/var/www/html/coworkservices/src/index.js",[],["99","100"],"/var/www/html/coworkservices/src/App.jsx",[],"/var/www/html/coworkservices/src/redux/store.js",[],"/var/www/html/coworkservices/src/components/Client.jsx",["101","102"],"import React,{useState, Fragment} from 'react';\nimport ClientEditForm from './ClientEditForm'; \nimport ClientAddForm from './ClientAddForm'; \nimport ClientTable from './ClientTable'; \n// import { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { getClient, getNextClient} from '../redux/clientDuck';\nimport Button from '@material-ui/core/Button'\n\nconst Client = (props) => {\n\n    //const {id} = useParams()\n    // const {register, errors,setValue, handleSubmit} = useForm();\n    //Edit client\n    const [editing, setEditing] = useState(false); \n    // React.useEffect.getClient()\n    const [cliente, setCliente] = useState([]);\n    \n    const [currentCliente, setCurrentCliente] = useState([]); \n\n\n    const dispatch = useDispatch()\n\n\n\n    // crearmos el state utilizando nuestra tienda\n    // store.client lo sacamos de la tienda\n    \n    // const clientData = useSelector(store => store.client.add)\n    // const clientDel = useSelector(store => store.client.del)\n    const client = useSelector(store => store.client.array)\n    \n    React.useEffect( () => {\n      dispatch(getClient());\n      // setCurrentCliente(client)\n      // setCliente(dispatch(getClient()));\n      // console.log()\n      //dispatch.getClient();\n        //dispatch(getClient());\n        // getClient();\n      //  getCliente();\n      //  ServiceHttpClient.getClient().then(x => setCliente(x));\n        //addClient();\n    }, [setCliente]);\n  // },[id])\n\n\n\n\n\n\n\n\n    const editRow = (client) => {\n      console.log('editRow')\n      console.log(client)\n      setEditing(true);\n  \n      setCurrentCliente(\n        { \n          id: client.id, name: client.name, last_name: client.last_name,\n          dni: client.dni, email: client.email,address: client.address\n        }\n      )\n      // console.log(currentCliente)\n\n    }\n\n    \n\n  \n\n    return (\n        <Fragment>\n            <div className=\"container\">\n              <div className=\"flex-row\">\n                <div className=\"flex-large\">\n                  { \n                  editing ? (\n                    <div>\n                      <h2>Edit Client</h2>\n                      <ClientEditForm \n                      cliente={client}                 \n                      currentCliente={currentCliente} \n                      setCurrentCliente={setCurrentCliente}\n                      />\n                    </div>\n                  ):(\n                    <div>\n                      <h2>Add Client</h2>\n                      <ClientAddForm \n                      // addClient={addClient} \n                      // addClient={dispatch(addClient())} crea un ciclo\n                      />\n                    </div>\n                  )\n                  }\n                  \n                  <div className=\"flex-large\">\n                  <h2>View Client</h2>\n                  \n                    <ClientTable \n                    cliente={client} \n                    currentCliente={currentCliente}\n                    // deleteClient={deleteClient} \n                    editRow={editRow}\n                    />\n                  {/* <ServiceHttpClient getCliente={getCliente}/> */}\n                  {/* <Client \n                    getClient={getClient}\n                    cliente={cliente} /> */}\n                </div>\n                <div>\n                  <Button variant=\"text\" color=\"default\" size=\"small\" onClick={() => dispatch(getNextClient(20))}>\n                    After\n                  </Button>\n                  <Button variant=\"text\" color=\"default\" size=\"small\" onClick={() => dispatch(getNextClient(20))}>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n        </div>  \n        \n      </Fragment>\n    )\n}\n\nexport default Client;\n","/var/www/html/coworkservices/src/components/Setting.jsx",[],"/var/www/html/coworkservices/src/components/Services.jsx",["103","104","105","106","107","108","109"],"import { format } from 'date-fns'\nimport React,{useState,useEffect } from 'react';\nimport ServicesTable from './ServicesTable';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { getClient } from '../redux/clientDuck';\nimport { getCategory } from '../redux/categoryDuck';\nimport { getAssociate } from '../redux/associateDuck';\nimport { getCategArea } from '../redux/areaDuck';\nimport { addService, updateService } from '../redux/serviceDuck';\nimport { getServiceAssoc } from '../redux/serviceAssocDuck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker,} from '@material-ui/pickers';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { useForm } from 'react-hook-form';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 220,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(3),\n  },\n  // root: {\n  //   width: '100%',\n  //   maxWidth: 500,\n  //   backgroundColor: theme.palette.background.paper,\n  // },\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst Services = () => {\n    \n    // const wrapper = createRef(); \n    const classes = useStyles();\n    const dispatch = useDispatch()\n    \n    const client = useSelector(store => store.client.array)\n    const associate = useSelector(store => store.associate.array)\n    const serviceassoc = useSelector(store => store.serviceassoc.array)\n    const category = useSelector(store => store.category.array)\n    const area = useSelector(store => store.area.array)\n\n    const [editing, setEditing] = useState(false)\n    // const [serviceTotal, setServiceTotal] = useState([])\n    const [idServiceAssoc, setIdServiceAssoc] = useState([])\n\n    // const [currentServiceAssoc, setCurrentServiceAssoc] = useState([])\n    const [modoEdicion, setModoEdicion] = useState(false)\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([]);\n    // const [startDate, setStartDate] = useState(new Date());\n    const { register, setValue, reset, handleSubmit, errors } = useForm({defaultValues: searchResults});\n    const [svalue, setSValue] = useState(null);\n    const [inputValue, setInputValue] = useState('');\n    const [categorias, setCategorias] = useState('');\n    const [asociados, setAsociados] = useState('');\n    const [areas, setAreas] = useState('');\n    // const [areaCateg, setAreaCateg] = useState([]);\n    //Manejo Date\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    //Manejo de Error\n    const [errorArea, setErrorArea] = useState(false)\n    const [errorCategory, setErrorCategory] = useState(false) \n    const [errorAssociate, setErrorAssociate] = useState(false)\n    const [errorDate, setErrorDate] = useState(false)\n\n    //Manejo de function se monto o no\n    const [mount, setMount] = useState(false)\n\n    const handleDateChange = (date) => {\n      setErrorDate(false)\n      setSelectedDate(date);\n    };\n\n    //Controla la seleccionde la Category\n    const handleChangeCategory = (event) => {\n\n      // console.log('handleErrorCategory:')\n      // console.log(event.target.value)\n\n      setErrorCategory(false)\n      setCategorias(Number(event.target.value))\n      //Call function getCategArea\n      dispatch(getCategArea(event.target.value));\n      \n    };\n\n    //Controla la seleccionde la Category\n    // const handleChangeArea = (event) => {\n    //   setErrorArea(false)\n    //   setAreas(Number(event.target.value))\n    // };\n\n    //Controla la seleccionde la Category\n    const handleChangeAreas = (event) => {\n      setErrorArea(false)\n      setAreas(Number(event.target.value))\n      console.log('handleChangeAreas:')\n      console.log(areas)\n      console.log(Number(event.target.value))\n\n    };\n    //Controla la seleccion de Associates\n    const handleChangeAssociate = (event) => {\n      setErrorAssociate(false)\n      setAsociados(Number(event.target.value))\n      console.log('handleChangeAssociate:')\n      console.log(asociados)\n      console.log(Number(event.target.value))\n    };\n\n    //Este useEffect funciona como DidMount al momento de pintar todos los object\n    useEffect(() => {\n      // console.log('mounted')\n      if (!mount){\n        setMount(true);\n        dispatch(getCategory());\n        dispatch(getAssociate());\n      };\n      // console.log(associate)\n    }, [mount]);\n\n    \n    //Controla el Autocomplete\n    const handleChange = event => {\n        \n        setSearchTerm(event.target.value);\n        setSValue(null)\n    };\n\n    const editRow = (service) => {\n\n\n      // console.log('--------------------------editRow---------------------');\n      // console.log(service);\n      setEditing(true);\n      setModoEdicion(true);\n      setAsociados(service.associate_id)\n      setCategorias(service.category_id)\n      setAreas(service.areas_id)\n      reset(service)\n    }\n\n    const handleClient =  e => {\n        e.preventDefault();\n        // console.log('handleClient')\n\n        setSValue(svalue)\n\n        reset(svalue)\n\n        if (typeof(svalue) !== 'undefined' && svalue != null) {\n\n          // console.log('Not Undefined and Not Null',svalue.id)\n          setIdServiceAssoc({id:svalue.id,key:Math.random()})\n          // servicesChange(svalue.id)\n          // setCurrentService(\n          //   [...currentService,\n          //   {service}]\n          // )\n          // setServiceTotal(svalue)\n        // } else {\n        //   console.log('Undefined or Null')\n          // setServiceTotal([])\n          //setCurrentService([])\n        }\n        // console.log('handleClient',currentService);\n    }\n\n\n    useEffect(() => {\n        dispatch(getClient());\n        const results = client.filter(searchclient =>\n            searchclient.name.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n        setSearchResults(results)\n    },[searchTerm]);\n\n\n\n    useEffect(() => {\n      if (typeof(idServiceAssoc.id) !== 'object' && idServiceAssoc.id != null) {\n        // console.log('CAll')\n        dispatch(getServiceAssoc(idServiceAssoc.id))\n      }\n    },[idServiceAssoc.key])\n\n    const onSubmit = (data, e) => {\n\n\n      if (!asociados || asociados.length === 0){\n        setErrorAssociate(true)\n        return\n      }\n      \n      if (!categorias || categorias.length === 0){\n        setErrorCategory(true)\n        return\n      }\n\n      if (!areas || areas.length === 0){\n        setErrorArea(true)\n        return\n      }\n\n      if(!data.name.trim()){\n        return\n      }\n\n      if (!selectedDate || selectedDate.length === 0){\n        setErrorDate(true)\n        return\n      }\n      const selectedDateService = format(selectedDate, 'MM/dd/yyyy HH:MM:ss')\n   \n\n      // setValue('type_services_id', data.type_services_id);\n      // setValue('mode_services_id', data.mode_services_id);\n      // setValue('areas_id', data.areas_id);\n      // setValue('type_services_id', 1);\n      // setValue('mode_services_id', 1);\n      setValue('category_id', categorias);\n      setValue('areas_id', areas);           //ojo add areas\n      setValue('associate_id', asociados);\n      setValue('client_id', parseInt(data.id));\n      // setValue('product_id', 1);\n      setValue('name_service', data.name_service);\n      setValue('gross_amount', data.gross_amount);\n      setValue('gross_amount', data.gross_amount);\n      setValue('phone_service', data.phone_service);\n      setValue('date_service', selectedDateService);\n      \n      \n      if (modoEdicion){\n\n        dispatch(updateService(data.id, categorias, \n          areas, asociados, parseInt(data.id),\n          data.name_service, data.gross_amount, data.gross_amount, selectedDateService));\n        setModoEdicion(false)\n      }else{\n          dispatch(addService(categorias, \n            areas, asociados, parseInt(data.id),\n            data.name_service, data.gross_amount, data.gross_amount, selectedDateService));\n      }\n      setErrorArea(false)\n      setErrorCategory(false)\n      setErrorAssociate(false)\n      setErrorDate(false)\n\n      //Update or add new service\n      dispatch(getServiceAssoc(parseInt(data.id)))\n      setIdServiceAssoc({id: parseInt(data.id), key: Math.random(data.id)})\n      setAsociados(-1)\n      setCategorias(-1)\n      setAreas(-1)\n\n      // limpiar campos  ref={this.wrapper}\n      e.target.reset();\n    }\n    return (\n            <div >\n              <div  className=\"flex-row\">\n                <div  className=\"flex-large\">\n                <div  className=\"flex-large\">  \n                    <h4 className=\"text-center\">\n                        {\n                        modoEdicion ? 'Edit Service' : 'Add Service'\n                        }\n                    </h4>\n                      <form onSubmit={handleSubmit(onSubmit)}>\n                          <Grid container justify=\"space-around\">\n                              <Grid item xs={12}>\n                                <Paper  className={classes.paper}>\n                                  <Autocomplete\n                                      id=\"search\"\n                                      disableClearable\n                                      options={searchResults}\n                                      getOptionLabel={(option) => option.name + ' ' + option.last_name}\n                                      // value={svalue}\n                                      onChange={(event, newValue) => {\n                                          setSValue(newValue);\n                                          }}\n                                      inputValue={inputValue}\n                                      onInputChange={(event, newInputValue) => {\n                                          setInputValue(newInputValue);\n                                      }}\n                                      filterSelectedOptions\n                                  //   options={searchResults.map((option) => option.id + ' ' + option.name + ' ' + option.last_name)}\n                                    renderInput={(params) => (\n                                      <TextField\n                                        {...params}\n                                        label=\"Search client\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        onChange={handleChange} \n                                        // onChange={e => setSearchResults({ value: e.target.value })}\n                                        // onSelect={handleClient(searchResults.name,\"name\")}\n                                        // onSelect={handleChange}\n                                        onSelect={handleClient}\n                                      //   InputProps={{ ...params.InputProps, \n                                      //     inputRef: params.innerRef,\n                                      //     type: 'search' }}\n                                      /> \n                                    )}\n                                  />\n                                  <div>\n                                  <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\n                                      <ListItem button divider>\n                                          <ListItemText primary={inputValue} />\n                                      </ListItem>\n                                  </List>\n                                  </div>\n                              </Paper>\n                            </Grid>\n                          </Grid>\n                          <div>\n                          <input \n                            type=\"hidden\" \n                            className=\"form-control mb-2\"\n                            placeholder=\"Name Associate\"\n                            name=\"last_name\" id=\"last_name\"\n                          />\n                          {/* Este Id es del client por la busquedad */}\n                          <input type=\"hidden\" \n                            name=\"id\" id=\"id\" htmlFor=\"id\"\n                            className=\"form-control\"  \n                            ref ={register}\n                          />\n                          </div>\n                          <div>\n                              <input type=\"hidden\" aria-label=\"Client\" \n                              name=\"name\" id=\"name\" htmlFor=\"name\"\n                              className=\"form-control\" placeholder=\"Add name service\" \n                              ref={register({\n                                  required: {\n                                      value: true, \n                                      message: 'Name client for service required'\n                                  }\n                              })}\n                              />\n                          </div>\n                          <div>\n                              <span className=\"text-danger text-small d-block mb-2\">\n                                  {errors?.name?.message}\n                              </span>\n                          </div>\n                          <div className=\"row align-items-start\">\n                          <Grid container justify=\"space-around\">\n                              <Grid item xs={12}>\n                                <Paper className={classes.paper}>\n                                  <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-associate\">Responsible associate</InputLabel>\n                                    <Select\n                                      labelId=\"select_associate_label\"\n                                      id=\"select_asociate\"\n                                      value={asociados === -1 ? '' : asociados}\n                                      onChange={handleChangeAssociate}\n                                      error={asociados === '' && errorAssociate ===true}\n                                    >\n                                    {\n                                      associate.map((associ, index) => (\n                                        <MenuItem key={index} value={associ.id}>\n                                          {associ.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                  </FormControl>\n                                  <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-category\">Category</InputLabel>\n                                    <Select\n                                      labelId=\"select_category_label\"\n                                      id=\"select_category\"\n                                      value={categorias === -1 ? '' : categorias}\n                                      onChange={handleChangeCategory}\n                                      error={categorias === '' && errorCategory ===true}\n                                    >\n                                    {\n                                      category.map((categ, index) => (\n                                        <MenuItem  key={index} value={categ.id}>\n                                          {categ.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                  </FormControl>\n                                  <FormControl className={classes.formControl}>\n                                    <InputLabel id=\"select-label-area\">Area</InputLabel>\n                                      <Select\n                                        labelId=\"select_area_label\"\n                                        id=\"select_area\"\n                                        value={areas === -1 ? '' : areas}\n                                        onChange={handleChangeAreas}\n                                        error={areas === '' && errorArea ===true}\n                                      >\n                                      {\n                                        area.map((ar, index) => (\n                                          <MenuItem  key={index} value={ar.id}>\n                                            {ar.name}\n                                          </MenuItem>\n                                        ))\n                                      }\n                                      </Select>\n                                  </FormControl>\n                                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <KeyboardDatePicker\n                                      disableToolbar\n                                      variant=\"inline\"\n                                      format=\"dd/MM/yyyy\"\n                                      margin=\"normal\"\n                                      id=\"date_service\"\n                                      label=\"Date picker inline\"\n                                      value={selectedDate}\n                                      onChange={handleDateChange}\n                                      error={selectedDate === '' ??  false}\n                                      KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                      }}\n                                    />\n                                  </MuiPickersUtilsProvider>\n                                </Paper>\n                              </Grid>\n                                <input \n                                  placeholder=\"Gross Amount\"\n                                  type=\"text\" \n                                  name=\"gross_amount\"\n                                  ref={register({\n                                      required: {\n                                          value: true, \n                                          message: 'Gross Amount required'\n                                      },\n                                      pattern: {\n                                        value: /^[0-9\\.]+$/, \n                                          message: 'Gross Amount is required, debe ser numerico'\n                                      }\n                                  })}\n                                  />\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors.gross_amount && errors.gross_amount.message}\n                                </span>\n                            </Grid>\n                          </div>\n                          {\n                          modoEdicion ? (\n                              <button className=\"btn btn-warning btn-block\" type=\"submit\">Edit Service</button>\n                          ) : (\n                              <button className=\"btn btn-dark btn-block\" type=\"submit\">Add Service</button>\n                          )\n                          }\n                      </form>\n                      </div>    \n                      <div  className=\"flex-large\">\n                      <h2>View Service</h2>\n                \n                      <ServicesTable \n                        // serviceTotal={serviceTotal}\n                        // inputValue={inputValue}\n                        serviceassoc={serviceassoc}\n                        // currentServiceAssoc={currentServiceAssoc}\n                        // searchResults={searchResults}\n                        getServiceAssoc={getServiceAssoc}\n                        setIdServiceAssoc={setIdServiceAssoc} \n                        editRow={editRow}\n                        />\n                    \n                    </div>\n                  </div>\n              </div>\n            </div>\n    )\n}\n\nexport default Services","/var/www/html/coworkservices/src/components/Dashboard.jsx",[],"/var/www/html/coworkservices/src/redux/serviceAssocDuck.js",[],"/var/www/html/coworkservices/src/redux/clientDuck.js",[],"/var/www/html/coworkservices/src/redux/associateDuck.js",[],"/var/www/html/coworkservices/src/redux/typestatusDuck.js",[],"/var/www/html/coworkservices/src/redux/categoryDuck.js",[],"/var/www/html/coworkservices/src/redux/serviceDuck.js",[],"/var/www/html/coworkservices/src/redux/productDuck.js",[],"/var/www/html/coworkservices/src/redux/areaDuck.js",[],"/var/www/html/coworkservices/src/redux/typeproductDuck.js",[],"/var/www/html/coworkservices/src/components/ClientEditForm.jsx",["110","111","112","113","114"],"import React, {Fragment,useState} from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { updateClient } from '../redux/clientDuck';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from '@material-ui/core/Button'\n\n\nconst ClientEditForm = (props) => {\n\n    \n    // console.log('currentCliente.name:')\n    // console.log(props.currentCliente.name)\n    // console.log('currentCliente.last_name:')\n    // console.log(props.currentCliente.last_name)\n    // console.log('Client:')\n    // console.log(props.client)\n\n    const dispatch = useDispatch()\n    // const clientcurrent = useSelector(store => store.client.array)\n\n    \n\n    const {values, setValue, control, register, errors, handleSubmit} = useForm({\n        defaultValues: props.currentCliente\n        // defaultValues: useMemo(() => {\n        //     return props.currentCliente;\n        //   }, [props])\n    });\n\n    // console.log(clientcurrent)\n    const [actualclient, setActualClient] = useState([]);\n\n    console.log('actualclient')\n    console.log(actualclient)\n    console.log('props')\n    console.log(props)\n    \n    // const handleChange = e => {\n    //     const {name, value} = e.target;\n    //     setUser({...user, [name]: value});\n    // }\n    // handleChange(event) {\n    //     this.setState({\n    //       text: event.target.value\n    //     });\n    //   };\n    // const handleChange = e => {\n    //     console.log('handleChange')\n    //     console.log(props)\n        // setValue('name', e.target.value);\n        // console.log(e.target)\n        // this.setState({\n        //     name: e.target.value\n        //   });\n        // setValue('name', props.currentCliente.name);\n        // setValue('last_name', props.currentCliente.last_name);\n        // setValue('dni', props.currentCliente.dni);\n        // setValue('address', props.currentCliente.address);\n        // setValue('email', props.currentCliente.email);\n    // }\n    // const handleChangeClick = e => {\n        // console.log('data')\n        // console.log(data)\n        // Detecta los cambios del input\n    //     console.log('name' in actualclient)\n    // if (typeof props.current !== 'undefined' && props.current !== null){\n    // if (props.current === true){\n    //     console.log('estoy setactualcliente es cero')\n    //     setActualClient([])\n    // }\n    if ('name' in actualclient){\n        console.log('dentro del if')\n        console.log(props.currentCliente)\n        \n        setValue('name', actualclient.name);\n        setValue('last_name', actualclient.last_name);\n        setValue('dni', actualclient.dni);\n        setValue('address', actualclient.address);\n        setValue('email', actualclient.email);\n        //console.log(setValue())\n        // setActualClient([])\n        \n    }else{\n        setValue('name', props.currentCliente.name);\n        setValue('last_name', props.currentCliente.last_name);\n        setValue('dni', props.currentCliente.dni);\n        setValue('address', props.currentCliente.address);\n        setValue('email', props.currentCliente.email);\n    }\n    // }\n\n    // const handleInputChange = (e) => {\n    //     const target = e.target;\n    //     console.log('handleChange')\n    //     console.log(target)\n    //     // const value = target.type === 'checkbox' ? target.checked : target.value;\n    //     // const name = target.name;\n    \n    //     // this.setState({\n    //     //   [name]: value\n    //     // });\n    //   }\n\n    \n\n\n    const onSubmit = (data, e) => {\n      \n        // props.addClient(props.currentCliente.id, data)\n        //props.addClient(props.cliente.id, data)\n        // data.id = props.currentClient.id\n        // props.updateClient(props.currentClient.id, data)\n            \n    \n            // data.id = props.currentCliente.id\n\n            console.log('Edit submit Client')\n            // console.log(props.currentCliente.id)\n            // console.log(this.state)\n\n            console.log(props)\n            console.log(data.name)\n            setActualClient(data)\n            props.setCurrentCliente(data)\n            // console.log(actualclient)\n            // props.updateClient(props.currentCliente.id, data)\n\n            // e.preventDefault()\n\n            // if (validate()){\n                // employeeService.insertEmployee(values)\n                dispatch(updateClient(props.currentCliente.id,data))\n                // resetForm()\n            // }\n            // dispatch(updateClient(props.currentCliente.id,data))\n            setActualClient([])\n            // setValue('name',data.name)\n            // props.setCurrentCliente(data)\n            //setValue('name', data.name);\n            // this.props.getClientId(props.currentCliente.id);\n            // limpiar campos\n            // e.target.reset();\n        //}\n        // limpiar campos\n        e.target.reset();\n    }\n    \n        // setTimeout(() => \n    //         // setValue('name', actualclient.name),\n    //         // setValue('name', actualclient.name),\n    //         // setValue('last_name', actualclient.last_name),\n    //         // setValue('dni', actualclient.dni),\n    //         // setValue('address', actualclient.address),\n    //         // setValue('email', actualclient.email)\n            // setValue('name', props.currentCliente.name),\n            // setValue('last_name', props.currentCliente.last_name),\n            // setValue('dni', props.currentCliente.dni),\n            // setValue('address', props.currentCliente.address),\n            // setValue('email', props.currentCliente.email)\n    //         //  setValue('name',123),\n    //         // setValue('last_name'),\n    //         // setValue('dni'),\n    //         // setValue('address'),\n    //         // setValue('email')\n        // );\n    // React.useEffect(() => {\n    //     console.log('llama a useEffect')\n    //     if ('name' in actualclient) {\n    //         setValue('name', actualclient.name);\n    //         setValue('name', actualclient.name);\n    //         setValue('last_name', actualclient.last_name);\n    //         setValue('dni', actualclient.dni);\n    //         setValue('address', actualclient.address);\n    //         setValue('email', actualclient.email);\n    //         // setValue([\n    //         //     { name: actualclient.name }, \n    //         //     { last_name: actualclient.last_name },\n    //         //     { dni: actualclient.dni }, \n    //         //     { address: actualclient.address },\n    //         //     { email: actualclient.email },\n    //         // ]);\n    //       }\n    //     //setActualClient([])\n\n    //   }, [actualclient]);\n    \n\n    //   React.useEffect(() => {\n    //     if (props.currentCliente) {\n    //         console.log('Edit')\n    //         console.log(props.currentCliente)\n    //     //   setValue([{ name: props.currentCliente.name }, \n    //     //     { last_name: props.currentCliente.last_name },\n    //     //     { last_name: props.currentCliente.last_name },\n    //     //     ]);\n    //         setValue('name', props.currentCliente.name);\n    //         setValue('last_name', props.currentCliente.last_name);\n    //         setValue('dni', props.currentCliente.dni);\n    //         setValue('address', props.currentCliente.address);\n    //         setValue('email', props.currentCliente.email);\n    //     }\n    //   }, [props.currentCliente]);  onChange={this.clientcurrent}\n    //     defaultValue={props.currentCliente ? props.currentCliente.name : ''}\n    //{this.handleChangeFirstName.bind(this)}\n                            // onChange={handleChange()}\n    // onChange={(event) => this.handleChange(event)}\n\n    return (\n        <Fragment>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"input-group\">\n                    <span className=\"input-group-text\">First and last name</span>\n                    {/* <Controller\n                        as={<input type='text' />}\n                        control={control}\n                        defaultValue={actualclient ? actualclient.name : ''}\n                        name='name'\n                    /> */}\n                     <input type=\"text\" aria-label=\"First name\" \n                    name=\"name\" id=\"name\" htmlFor=\"name\"\n                    className=\"form-control\" placeholder=\"Add name client\" \n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Name es requerido'\n                            }\n                    })}\n                    />\n                    <input type=\"text\" aria-label=\"Last name\" name=\"last_name\" id=\"last_name\"\n                    className=\"form-control\" placeholder=\"Add last name client\"\n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Last name es requerido'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.name?.message}\n                    </span>\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.last_name?.message}\n                    </span>\n                </div>\n                <div>\n                    \n                <input \n                    placeholder=\"Ingrese DNI\"\n                    type=\"text\" \n                    name=\"dni\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[0-9]+$/, \n                            message: 'DNI es requerido, debe ser numerico'\n                            }\n                    })}\n                    />\n                \n                <input \n                    placeholder=\"Provider Address\"\n                    type=\"text\" \n                    name=\"address\"\n                    ref={register({\n                        required: \"Required\"\n                    })}\n                    />\n                </div> \n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.dni && errors.dni.message}\n                    </span>\n                </div>\n                <div className=\"mb-3\">\n                    <input placeholder=\"Email address\" type=\"email\" className=\"form-control\" \n                    id=\"InputEmail\"  name=\"email\" \n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\"\n                        }\n                      })}\n                    />\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.email && errors.email.message}\n                    </span>\n                </div>\n                <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n                Edit client\n                </Button>\n            </form>\n        </Fragment>\n    );\n}\nexport default ClientEditForm;","/var/www/html/coworkservices/src/components/ClientTable.jsx",["115","116"],"import React from 'react';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { deleteClient,getClient } from '../redux/clientDuck';\nimport Button from '@material-ui/core/Button'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\n\nconst ClientTable = (props) => {\n\n    //const [listClient, setListClient] = useState([]);\n\n    // console.log('props de ClientTable:')\n    // console.log(props)\n    const dispatch = useDispatch()\n\n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n        // Swal.fire('Any fool can use a computer')\n        // dispatch(deleteClient(cliente.id))\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteClient(id))\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your client ${name} ${lastname} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n\n    }\n\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th># DNI</th>\n                <th>Client name</th>\n                <th>Lastname</th>\n                <th>Address</th>\n                <th>Email</th>\n                <th>Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                props.cliente.length > 0 ?\n                  props.cliente.map(cliente  => (\n                        <tr key={cliente.id}>\n                        <td>{cliente.dni}</td>\n                        <td>{cliente.name}</td>\n                        <td>{cliente.last_name}</td>\n                        <td>{cliente.address}</td>\n                        <td>{cliente.email}</td>\n                        <td>\n                            <Button variant=\"outlined\" color=\"primary\"\n                                onClick={\n                                    () => {props.editRow(cliente)}\n                                }\n                            >\n                              Edit\n                            </Button>\n                            <Button variant=\"contained\" color=\"secondary\"\n                                onClick={() => HandleButtonDelete(cliente.id,cliente.name,cliente.last_name)}\n                                startIcon={<DeleteIcon/>}\n                            >\n                            Delete\n                            </Button>\n                            \n                        </td>\n                    </tr>\n                    )) : (\n                \n                        <tr>\n                        <td colSpan={3}>No cliente</td>\n                        </tr>\n                    )\n            }\n            </tbody>\n        </table>\n     );\n    \n}\n\nexport default ClientTable;\n","/var/www/html/coworkservices/src/components/ClientAddForm.jsx",["117"],"//rafc\nimport React, {Fragment}  from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector} from 'react-redux';\n// import { getClient, getNextClient} from '../redux/clientDuck';\nimport { addClient } from '../redux/clientDuck';\n\nconst ClientAddForm = (props) => {\n    // console.log('ADdClients')\n    // console.log(props)\n    const {register, errors, handleSubmit} = useForm();\n    const dispatch = useDispatch()\n\n    // React.useEffect(() => {\n    //     const obtenerInfo = () => {\n    //         dispatch(getClient())\n    //     }\n    //     obtenerInfo()\n    // }, [dispatch])\n\n    \n\n    // props.setCliente(...props.cliente,\n    //     clientData)\n    // console.log('clientData')\n    // console.log(clientData)\n\n    \n    const onSubmit = (data, e) => {\n        // console.log('Add submit data')\n        // console.log(data)\n        // console.log(data.name,data.last_name,data.dni,data.email)\n        // props.addClient(data.name,data.last_name,data.dni,data.address,data.email)\n        dispatch(addClient(data.name,data.last_name,data.dni,data.address,data.email))\n        // props.setCliente([\n        //       ...props.cliente, \n        //       data.data\n        //     ])\n        // limpiar campos\n        e.target.reset();\n    }\n\n    return (\n        <Fragment>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"input-group\">\n                    <span className=\"input-group-text\">First and last name</span>\n                    <input type=\"text\" aria-label=\"First name\" \n                    name=\"name\" id=\"name\" htmlFor=\"name\"\n                    className=\"form-control\" placeholder=\"Add name client\" \n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Name es requerido'\n                            }\n                    })}\n                    />\n                    <input type=\"text\" aria-label=\"Last name\" name=\"last_name\" id=\"last_name\"\n                    className=\"form-control\" placeholder=\"Add last name client\"\n                    ref={register({\n                        required: {\n                            value: true, \n                            message: 'Last name es requerido'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.name?.message}\n                    </span>\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors?.last_name?.message}\n                    </span>\n                </div>\n                <div>\n                <input \n                    placeholder=\"Ingrese DNI\"\n                    type=\"text\" \n                    name=\"dni\"\n                    id=\"dni\"\n                    className=\"form-control\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[0-9]+$/, \n                            message: 'DNI es requerido, debe ser numerico'\n                            }\n                    })}\n                    />\n                </div>\n                <div>\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.dni && errors.dni.message}\n                    </span>\n                </div>\n                <div>\n                <input \n                    placeholder=\"Provider Address\"\n                    type=\"text\" id=\"address\"\n                    name=\"address\" className=\"form-control\"\n                    ref={register({\n                        required: \"Required\"\n                    })}\n                />\n                </div>\n                <div className=\"mb-3\">\n                    <input placeholder=\"Email address\" \n                    type=\"email\" className=\"form-control\" \n                    id=\"InputEmail\" aria-describedby=\"emailHelp\" name=\"email\"\n                    ref={register({\n                        required: \"Required\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\"\n                        }\n                      })}\n                    />\n                    <span className=\"text-danger text-small d-block mb-2\">\n                        {errors.email && errors.email.message}\n                    </span>\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\n                </div>\n                <button type=\"submit\" >Add Client</button>\n            </form>\n        </Fragment>\n    );\n}\nexport default ClientAddForm;\n","/var/www/html/coworkservices/src/components/Associate.jsx",["118"],"import React,{useState, Fragment, useEffect} from 'react'\nimport { useDispatch, useSelector} from 'react-redux';\nimport { getAssociate, addAssociate, deleteAssociate, updateAssociate } from '../redux/associateDuck';\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Swal from 'sweetalert2';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(2),\n      minWidth: 220,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(3),\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\nconst Associate = () => {\n    const classes = useStyles();\n    //-------------------------------------------\n    const [asociados, setAsociados] = useState([])\n    const [modoEdicion, setModoEdicion] = useState(false)\n    const [refreshKey, setRefreshKey] = useState(0)\n    const [gender, setGender] = useState(0)\n    const asociado = useSelector(store => store.associate.array)\n    const {setValue, register, reset, errors, handleSubmit} = useForm({defaultValues: asociado});\n    const dispatch = useDispatch()\n    const genero = [{id: 1, name:'Masculino'},{id: 2, name:'Femenino'}];\n    \n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteAssociate(id,name,lastname));\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your Associate ${name} ${lastname} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n\n    }\n    \n    const handleChangeGender = (event) => {\n        setGender(event.target.value)\n    }\n\n    const eliminarAsociado = (id,name,last_name) => {\n        HandleButtonDelete(id,name,last_name)\n    }\n\n    const editar = items => {\n        setGender(items.gender)\n        reset(items)\n        setModoEdicion(true)\n    }\n\n    useEffect(() => {\n        dispatch(getAssociate());\n    },[refreshKey])\n\n    const onSubmit = (data, e) => {\n\n        if(!data.name.trim()){\n            return\n        }\n        setAsociados([\n            ...asociados,\n            {name: data.name,\n            last_name: data.last_name,\n            dni: data.dni,\n            address: data.address,\n            gender: gender,\n            email: data.email}\n        ])\n\n        setValue('name', data.name);\n        setValue('last_name', data.last_name);\n        setValue('dni', data.dni);\n        setValue('address', data.address);\n        setValue('email', data.email);\n        setValue('gender', gender);\n        setRefreshKey(oldKey => oldKey +1)\n        \n        if (modoEdicion){\n            dispatch(updateAssociate(data.id,data.name.toLocaleUpperCase(),data.last_name.toLocaleUpperCase(),data.dni,data.address,data.email,gender));\n            setModoEdicion(false)\n\n        }else{\n            dispatch(addAssociate(data.name,data.last_name,data.dni,data.address,data.email,gender));\n        }\n        dispatch(getAssociate());\n        setGender(-1)\n        \n        // limpiar campos\n        e.target.reset();\n    }\n    return (\n        <Fragment>\n            <div className=\"container mt-5\">\n            <h1 className=\"text-center\">Associates</h1>\n            <hr/>\n            <div className=\"row\">\n                <div className=\"col-7\">\n                <h4 className=\"text-center\">Lista de Asociados</h4>\n                <ul className=\"list-group\">\n                    {\n                        asociado.length === 0 ? (\n                            <li className=\"list-group-item\">Sin Asociados</li>\n                        ) : (\n                            asociado.map(items => (\n                                <li className=\"list-group-item\" key={items.id}>\n                                <span className=\"lead\">{items.name} {items.last_name} {items.email}</span>\n                                <Button variant=\"contained\" color=\"secondary\"\n                                className=\"btn btn-sm btn-danger float-right mx-2\"\n                                onClick={() => eliminarAsociado(items.id,items.name,items.last_name)\n                                }\n                                startIcon={<DeleteIcon/>}\n                                >\n                                Delete\n                                </Button>\n                                <Button variant=\"outlined\" color=\"primary\"\n                                className=\"btn btn-sm btn-danger float-right mx-2\"\n                                onClick={\n                                    () => editar(items) \n                                }\n                                >Edit\n                                </Button>\n                                </li>\n                            ))\n                        )\n                    }\n                </ul>\n            </div>\n            <div className=\"col-5\">\n                    <h4 className=\"text-center\">\n                        {\n                        modoEdicion ? 'Editar Asociado' : 'Agregar Asociado'\n                        }\n                    </h4>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <div>\n                        <input \n                            type=\"hidden\" \n                            className=\"form-control mb-2\"\n                            name=\"id\" id=\"id\"\n                            ref={register()}\n                        />\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Name Associate\"\n                                    name=\"name\" id=\"name\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Name es requerido'\n                                            }\n                                    })}\n                                />\n                                <div>\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.name?.message}\n                                </span>\n                                </div>\n                            </div>\n                            <div className=\"col-6\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Last Name Associate\"\n                                    name=\"last_name\" id=\"last_name\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Last name es requerido'\n                                            }\n                                    })}\n                                />\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.last_name?.message}\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Address\"\n                                    name=\"address\" id=\"address\"\n                                    ref={register({\n                                        required: {\n                                            value: true, \n                                            message: 'Address es requerido'\n                                            }\n                                    })}\n                                />\n                                <div>\n                                    <span className=\"text-danger text-small d-block mb-2\">\n                                        {errors?.address?.message}\n                                    </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-category\">Gender</InputLabel>\n                                    <Select\n                                      labelId=\"select_gender_label\"\n                                      id=\"select_gender\"\n                                    //   value={category}    \n                                      value={gender === -1 ? '' : gender}\n                                      onChange={handleChangeGender}\n                                    >\n                                    {\n                                      genero.map((g, index) => (\n                                        <MenuItem  key={index} value={g.id}>\n                                          {g.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <span className=\"text-danger text-small d-block mb-2\">\n                                    {errors?.gender?.message}\n                                </span>\n                            </div>\n                            <div className=\"col-12\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control mb-2\"\n                                    placeholder=\"Email\"\n                                    name=\"email\" id=\"email\"\n                                    ref={register({\n                                        required: \"Required\",\n                                        pattern: {\n                                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                          message: \"Invalid email address\"\n                                        }\n                                    })}\n                                />\n                                <div>\n                                    <span className=\"text-danger text-small d-block mb-2\">\n                                        {errors?.email?.message}\n                                    </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        \n                        </div>  \n                        {\n                        modoEdicion ? (\n                            <button className=\"btn btn-warning btn-block\" type=\"submit\">Editar</button>\n                        ) : (\n                            <button className=\"btn btn-dark btn-block\" type=\"submit\">Agregar</button>\n                        )\n                        }\n                    </form>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Associate\n","/var/www/html/coworkservices/src/components/ServicesTable.jsx",["119","120","121","122","123","124","125","126","127","128"],"import React, {useState, useEffect } from 'react';\nimport { format, formatDistance, formatRelative, subDays } from 'date-fns'\n// import { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nimport { deleteService } from '../redux/serviceDuck';\nimport { getTypeProducts } from '../redux/typeproductDuck';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { Modal,Container,Row,Col } from 'react-bootstrap';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker,} from '@material-ui/pickers';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme, TextField } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useForm } from 'react-hook-form';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 220,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(3),\n  },\n  // root: {\n  //   width: '100%',\n  //   maxWidth: 500,\n  //   backgroundColor: theme.palette.background.paper,\n  // },\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nconst ServicesTable = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch()\n\n  const typeproduct = useSelector(store => store.area.array)\n\n  const [modalShow, setModalShow] = useState(false);\n  const [errorTypeProduct,setErrorTypeProduct] = useState(false);\n  const [tipoproduct, setTipoProduct] = useState('');\n\n  const { register, setValue, reset, handleSubmit, errors, control } = useForm();\n\n  // const service = useSelector(store => store.service.array)\n  // const [idServiceAssocDel, setIdServiceAssocDel] = useState([])\n  \n\n  // useEffect(() => {\n\n  //   console.log('setIdServiceAssocDel.......................')\n  //   console.log(idServiceAssocDel)\n  //   console.log(idServiceAssocDel.id)\n  //   console.log(idServiceAssocDel.key)\n  //   dispatch(getServiceAssoc(idServiceAssocDel.id))\n  // },[idServiceAssocDel.key])\n\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'btn btn-success',\n      cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n\n  const HandleButtonDelete = (id,name,client_id) =>{\n\n    swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You won't be able to revert this!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, delete it!',\n        cancelButtonText: 'No, cancel!',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.isConfirmed) {\n            dispatch(deleteService(id))\n            dispatch(props.getServiceAssoc(client_id))\n            props.setIdServiceAssoc({id:client_id,key:Math.random()})\n            \n            // setIdServiceAssocDel(client_id)\n            // setIdServiceAssocDel({id: client_id, key: Math.random()})\n\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            `Your Service ${name} has been deleted.`,\n            'success'\n          )\n        } else if (\n          /* Read more about handling dismissals below */\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled'\n          )\n        }\n      })\n  }\n\n  const eliminarService = (id,name,client_id) => {\n    console.log('delete+++')\n    console.log(client_id)\n    console.log(name)\n    console.log(id)\n    HandleButtonDelete(id,name,client_id)\n  }\n\n\n  const HandleChangeTypeProduct = (event) => {\n    console.log('HandleChangeTypeProduct:')\n    console.log(event.target.value)\n    setErrorTypeProduct(true)\n    setTipoProduct(Number(event.target.value))\n\n    dispatch(getTypeProducts());\n\n  }\n\n  const AddModalProduct = (props) => {\n\n    \n    setValue('service_id',props.service_id)\n    \n    useEffect(() =>{\n      dispatch(getTypeProducts());\n\n      console.log('---AddModalProducts---')\n      console.log(typeproduct)\n      console.log(props)\n    },[]);\n\n    \n    \n    return (\n\n      <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add Product\n           {console.log('---dentro returnAddModalProduct---')}\n           {console.log(props.service_id)}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"show-grid\">\n          <Container>\n            <Row>\n              <Col xs={18} md={12}>\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"select-label-type-products\">Responsible type products</InputLabel>\n                  <Select\n                    labelId=\"select_type_products_label\"\n                    id=\"select_typeproduct\"\n                    value={tipoproduct === -1 ? '' : tipoproduct}\n                    onChange={HandleChangeTypeProduct}\n                    error={tipoproduct === '' && errorTypeProduct ===true}\n                  >\n                  {\n                    typeproduct.map((tprod, index) => (\n                      <MenuItem key={index} value={tprod.id}>\n                        {console.log(tprod)}\n                        {tprod.name}\n                      </MenuItem>\n                    ))\n                  }\n                  </Select>\n              </FormControl>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={18} md={12}>\n              <TextField\n                id=\"name_products\"\n                label=\"Description Product\"\n                multiline\n                fullWidth\n                rows={3}\n                defaultValue=\"Default Value\"\n                variant=\"outlined\"\n              />\n              </Col>\n\n            </Row>\n  \n            <Row>\n              <Col xs={6} md={4}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date_start\"\n                  label=\"Date Start\"\n                  // value={selectedDate}\n                  // onChange={handleDateChange}\n                  // error={selectedDate === '' ??  false}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n              </Col>\n              <Col xs={6} md={4}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"dd/MM/yyyy\"\n                  margin=\"normal\"\n                  id=\"date_end\"\n                  label=\"Date End\"\n                  // value={selectedDate}\n                  // onChange={handleDateChange}\n                  // error={selectedDate === '' ??  false}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n              </Col>\n              <Col xs={6} md={4}>\n              <input type=\"text\" \n                name=\"services_id\" id=\"services_id\" htmlFor=\"services_id\"\n                className=\"form-control\" ref ={register} \n              />\n              </Col>\n            </Row>\n          </Container>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={props.onHide}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n    \n    return (\n      <table>\n          <thead>\n          <tr>\n              <th>Associate</th>\n              <th>Category</th>\n              <th>Area</th>\n              <th>Date service</th>\n              <th>Gross Amount</th>\n              <th>Actions</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n               props.serviceassoc.length > 0 ?\n               props.serviceassoc.map( (servi,idx)  => (\n                      <tr key={servi.id}>\n                      <td>{servi.name_associates}</td>\n                      <td>{servi.name_categories}</td>\n                      <td>{servi.name_areas}</td>\n                      <td>{servi.date_service}</td>\n                      <td>{servi.gross_amount}</td>\n                      <td>\n                      \n                          <>\n                            <Button variant=\"primary\" onClick={() => setModalShow(true)}>\n                              Products\n                            </Button>\n\n                            <AddModalProduct show={modalShow} \n                              id={servi.id} \n                              areas_id={servi.areas_id} \n                              associate_id={servi.associate_id} \n                              category_id={servi.category_id} \n                              client_id={servi.client_id} \n                              date_service={servi.date_service} \n                              onHide={() => setModalShow(false)} \n                            \n                            />\n                          </>\n                          <Button variant=\"outlined\" color=\"primary\"\n                              onClick={\n                                  () => {props.editRow(servi)}\n                              }\n                          >\n                            Edit\n                          </Button>\n                          <Button variant=\"contained\" color=\"secondary\"\n                              onClick={() => \n                                eliminarService(servi.id,servi.name_areas,servi.client_id)\n                              //   // HandleButtonDelete(servi.id,servi.name,servi.last_name)\n                              }\n                              startIcon={<DeleteIcon/>}\n                          >\n                          Delete\n                          </Button>\n                          \n                      </td>\n                  </tr>\n                  )) : (\n              \n                      <tr>\n                      <td colSpan={3}>No service</td>\n                      </tr>\n                  )\n          }\n          </tbody>\n      </table>\n   );\n}\nexport default ServicesTable;\n","/var/www/html/coworkservices/src/components/Area.jsx",["129","130"],"import React,{useState, Fragment, useEffect} from 'react'\nimport { useDispatch, useSelector} from 'react-redux';\nimport { addArea, deleteArea, updateArea, getCategArea } from '../redux/areaDuck';\nimport { getCategory } from '../redux/categoryDuck';\nimport { getStatus } from '../redux/typestatusDuck'\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(2),\n      minWidth: 220,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(3),\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\n  \n\nconst Area = () => {\n\n    const classes = useStyles();\n\n    //-------------------------------------------\n    const [modoEdicion, setModoEdicion] = useState(false)\n    const [refreshKey, setRefreshKey] = useState(false)\n    const area = useSelector(store => store.area.array)\n    const showstatus = useSelector(store => store.showstatus.array)\n    const category = useSelector(store => store.category.array)\n    const {setValue, register, reset, errors, handleSubmit} = useForm({defaultValues: area});\n    const dispatch = useDispatch()\n    const [categorias, setCategorias] = useState('');\n    const [name, setName] = useState('');\n    const [status, setStatus] = useState(0);\n    const [error, setError] = useState(false)\n    const [errorStatus, setErrorStatus] = useState(false)\n    const [errorCategory, setErrorCategory] = useState(false)\n\n    \n    //Controla la seleccionde la Category\n    const handleChangeCategory = (event) => {\n        setErrorCategory(false)\n        setCategorias(Number(event.target.value))\n    };\n\n    const handleChangeName = (event) => {\n        setError(false)\n        setName(event.target.value.toLocaleUpperCase())\n    }\n\n    const handleChangeStatus = (event) => {\n        setErrorStatus(false)\n        setStatus(event.target.value)\n    };\n\n    const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n    })\n\n    const HandleButtonDelete = (id,name,lastname) =>{\n\n        swalWithBootstrapButtons.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteArea(id,name));\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                `Your Area ${name} has been deleted.`,\n                'success'\n              )\n            } else if (\n              /* Read more about handling dismissals below */\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled'\n              )\n            }\n          })\n    }\n    \n\n    const eliminarArea = (id,name,last_name) => {\n        HandleButtonDelete(id,name,last_name)\n    }\n\n    const editar = items => {\n        setCategorias(items.category_id)\n        setStatus(items.status)\n        setName(items.name)\n        reset(items)\n        setModoEdicion(true)\n    }\n\n\n    useEffect(() => {\n      // console.log('llamado a getCategArea')\n      // console.log(areas)\n      if (!refreshKey){\n        setRefreshKey(true);\n        dispatch(getCategArea());\n\n      }\n    },[refreshKey]);\n\n    useEffect(() => {\n        dispatch(getCategory());\n        dispatch(getStatus());\n      }, []);\n\n    const onSubmit = (data, e) => {\n      \n\n        if (!categorias || categorias.length === 0){\n            setErrorCategory(true)\n            return\n        }\n        if(!name.length){\n            setError(true)\n            return\n        }\n        if(!status || status.length === 0){\n          setErrorStatus(true)\n          return\n        }\n\n        // console.log('onSubmit') !name.trim()\n        \n        // console.log(data.id,name,categorias,status)\n\n        // let aareas = areas.map( a => {\n        //   if (a.id === data.id){\n        //       let v = {id:data.id,category_id: categorias,name: name,status:status}\n        //       return {...a, v};\n        //     } else {\n        //       return a;\n        //     }\n        // });\n\n        // console.log(aareas)\n        // setAreas(aareas)\n        // setAreas([\n        //     ...areas,\n        //     {id: data.id,\n        //     name: name,\n        //     category_id: categorias,\n        //     status: status}\n        // ])\n        setValue('id', data.id);\n        setValue('name', name);\n        setValue('category_id', categorias);\n        setValue('status', status);\n        \n        \n        if (modoEdicion){\n            dispatch(updateArea(data.id,categorias,name,status));\n            setModoEdicion(false)\n            \n        }else{\n            dispatch(addArea(categorias,name,status));\n        }\n        dispatch(getCategArea());\n        setCategorias(-1)\n        setName(-1)\n        setStatus(-1)\n        setRefreshKey(false)\n        setError(false)\n        setErrorStatus(false)\n\n        // limpiar campos\n        e.target.reset();\n    }\n    return (\n        <Fragment>\n            <div className=\"container mt-5\">\n            <h1 className=\"text-center\">Areas</h1>\n            <hr/>\n            <div className=\"row\">\n                <div className=\"col-7\">\n                <h4 className=\"text-center\">Lista de Areas</h4>\n                <ul className=\"list-group\">\n                  <li className=\"lead left-0\">Category - Area</li>\n                    {\n                      area.length === 0 ? (\n                          <li className=\"list-group-item\">Sin Areas</li>\n                      ) : (\n                        area.map(items => items.status === 1 ? \n                              (<li className=\"list-group-item\" key={items.id}>\n                                <span className=\"lead\" >{items.name_categories} - {items.name}</span>\n                                  \n                              <Button variant=\"contained\" color=\"secondary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={() => eliminarArea(items.id,items.name,items.category_id)\n                              }\n                              startIcon={<DeleteIcon/>}\n                              >\n                              Delete\n                              </Button>\n                              <Button variant=\"outlined\" color=\"primary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={\n                                  () => editar(items) \n                              }\n                              >Edit\n                              </Button>\n                              </li>\n                              ):(\n                              <li className=\"list-group-item\" style={{backgroundColor:'#EEE8AA'}} key={items.id}>\n                              <span className=\"lead\" >{items.name_categories} - {items.name}</span>\n                                \n                              <Button variant=\"contained\" color=\"secondary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={() => eliminarArea(items.id,items.name,items.category_id)\n                              }\n                              startIcon={<DeleteIcon/>}\n                              >\n                              Delete\n                              </Button>\n                              <Button variant=\"outlined\" color=\"primary\"\n                              className=\"btn btn-sm btn-danger float-right mx-2\"\n                              onClick={\n                                  () => editar(items) \n                              }\n                              >Edit\n                              </Button>\n                              </li>)    \n                        ))\n                    }\n                </ul>\n            </div>\n            <div className=\"col-5\">\n                    <h4 className=\"text-center\">\n                        {\n                        modoEdicion ? 'Editar Area' : 'Agregar Area'\n                        }\n                    </h4>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <div>\n                        <input \n                            type=\"hidden\" \n                            className=\"form-control mb-2\"\n                            name=\"id\" id=\"id\"\n                            ref={register()}\n                        />\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-category\">Category</InputLabel>\n                                    <Select\n                                      labelId=\"select_category_label\"\n                                      id=\"select_category\"\n                                      value={categorias === -1 ? '' : categorias}\n                                      onChange={handleChangeCategory}\n                                      error={categorias === '' && errorCategory ===true}\n                                      // helperText={categorias === 0 ? 'Empty field!' : ' '}\n                                    >\n                                    {\n                                      category.map((categ, index) => (\n                                        <MenuItem  key={index} value={categ.id}>\n                                          {categ.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <TextField \n                                  id=\"name\"  \n                                  name=\"name\" multiline={true}\n                                  rows={2}\n                                  fullWidth={true}\n                                  style = {{width: 300}}\n                                  label=\"Area Name\" \n                                  variant=\"outlined\" \n                                  value={name === -1 ? '' :name}\n                                  onChange={handleChangeName}\n                                  error={name === \"\" && error ===true}\n                                  helperText={name === \"\" ? 'Empty field!' : ' '}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <FormControl className={classes.formControl}>\n                                  <InputLabel id=\"select-label-status\">Status</InputLabel>\n                                    <Select\n                                      labelId=\"select_status_label\"\n                                      id=\"select_status\"   \n                                      value={status === -1 ? '' : status}\n                                      onChange={handleChangeStatus}\n                                      error={status === 0 && errorStatus ===true}\n                                      // helperText={status === 0 ? 'Empty field!' : ' '}\n                                    >\n                                    {\n                                      showstatus.map((st, index) => (\n                                        <MenuItem  key={index} value={st.id}>\n                                          {st.name}\n                                        </MenuItem>\n                                      ))\n                                    }\n                                    </Select>\n                                </FormControl>\n                                <div>\n                                  <span className=\"text-danger text-small d-block mb-2\">\n                                      {errors?.select_status?.message}\n                                  </span>\n                                </div>\n                                \n                            </div>\n                        </div>\n                        \n                        </div>  \n                        {\n                        modoEdicion ? (\n                            <button className=\"btn btn-warning btn-block\" type=\"submit\">Editar</button>\n                        ) : (\n                            <button className=\"btn btn-dark btn-block\" type=\"submit\">Agregar</button>\n                        )\n                        }\n                    </form>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Area\n",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":17,"column":12,"nodeType":"137","messageId":"138","endLine":17,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":44,"column":8,"nodeType":"141","endLine":44,"endColumn":20,"suggestions":"142"},{"ruleId":"135","severity":1,"message":"143","line":12,"column":47,"nodeType":"137","messageId":"138","endLine":12,"endColumn":61},{"ruleId":"135","severity":1,"message":"144","line":63,"column":12,"nodeType":"137","messageId":"138","endLine":63,"endColumn":19},{"ruleId":"135","severity":1,"message":"145","line":85,"column":12,"nodeType":"137","messageId":"138","endLine":85,"endColumn":21},{"ruleId":"139","severity":1,"message":"146","line":141,"column":8,"nodeType":"141","endLine":141,"endColumn":15,"suggestions":"147"},{"ruleId":"139","severity":1,"message":"148","line":197,"column":7,"nodeType":"141","endLine":197,"endColumn":19,"suggestions":"149"},{"ruleId":"139","severity":1,"message":"150","line":206,"column":7,"nodeType":"141","endLine":206,"endColumn":27,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":453,"column":54,"nodeType":"154","messageId":"155","endLine":453,"endColumn":55,"suggestions":"156"},{"ruleId":"135","severity":1,"message":"157","line":2,"column":19,"nodeType":"137","messageId":"138","endLine":2,"endColumn":29},{"ruleId":"135","severity":1,"message":"158","line":3,"column":23,"nodeType":"137","messageId":"138","endLine":3,"endColumn":34},{"ruleId":"135","severity":1,"message":"159","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":17},{"ruleId":"135","severity":1,"message":"160","line":24,"column":12,"nodeType":"137","messageId":"138","endLine":24,"endColumn":18},{"ruleId":"135","severity":1,"message":"161","line":24,"column":30,"nodeType":"137","messageId":"138","endLine":24,"endColumn":37},{"ruleId":"135","severity":1,"message":"158","line":2,"column":23,"nodeType":"137","messageId":"138","endLine":2,"endColumn":34},{"ruleId":"135","severity":1,"message":"162","line":3,"column":23,"nodeType":"137","messageId":"138","endLine":3,"endColumn":32},{"ruleId":"135","severity":1,"message":"158","line":4,"column":23,"nodeType":"137","messageId":"138","endLine":4,"endColumn":34},{"ruleId":"139","severity":1,"message":"146","line":98,"column":7,"nodeType":"141","endLine":98,"endColumn":19,"suggestions":"163"},{"ruleId":"135","severity":1,"message":"164","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"165","line":2,"column":18,"nodeType":"137","messageId":"138","endLine":2,"endColumn":32},{"ruleId":"135","severity":1,"message":"166","line":2,"column":34,"nodeType":"137","messageId":"138","endLine":2,"endColumn":48},{"ruleId":"135","severity":1,"message":"167","line":2,"column":50,"nodeType":"137","messageId":"138","endLine":2,"endColumn":57},{"ruleId":"135","severity":1,"message":"143","line":17,"column":47,"nodeType":"137","messageId":"138","endLine":17,"endColumn":61},{"ruleId":"135","severity":1,"message":"168","line":55,"column":31,"nodeType":"137","messageId":"138","endLine":55,"endColumn":36},{"ruleId":"135","severity":1,"message":"169","line":55,"column":38,"nodeType":"137","messageId":"138","endLine":55,"endColumn":50},{"ruleId":"135","severity":1,"message":"170","line":55,"column":52,"nodeType":"137","messageId":"138","endLine":55,"endColumn":58},{"ruleId":"135","severity":1,"message":"161","line":55,"column":60,"nodeType":"137","messageId":"138","endLine":55,"endColumn":67},{"ruleId":"139","severity":1,"message":"171","line":143,"column":7,"nodeType":"141","endLine":143,"endColumn":9,"suggestions":"172"},{"ruleId":"139","severity":1,"message":"146","line":133,"column":7,"nodeType":"141","endLine":133,"endColumn":19,"suggestions":"173"},{"ruleId":"139","severity":1,"message":"146","line":138,"column":10,"nodeType":"141","endLine":138,"endColumn":12,"suggestions":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'cliente' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["177"],"'createMuiTheme' is defined but never used.","'editing' is assigned a value but never used.","'errorDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["178"],"React Hook useEffect has missing dependencies: 'client' and 'dispatch'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has missing dependencies: 'dispatch' and 'idServiceAssoc.id'. Either include them or remove the dependency array.",["180"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["181","182"],"'Controller' is defined but never used.","'useSelector' is defined but never used.","'TextField' is defined but never used.","'values' is assigned a value but never used.","'control' is assigned a value but never used.","'getClient' is defined but never used.",["183"],"'format' is defined but never used.","'formatDistance' is defined but never used.","'formatRelative' is defined but never used.","'subDays' is defined but never used.","'reset' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["184"],["185"],["186"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"messageId":"195","fix":"196","desc":"197"},{"messageId":"198","fix":"199","desc":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"201","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [dispatch, setCliente]",{"range":"208","text":"209"},"Update the dependencies array to be: [dispatch, mount]",{"range":"210","text":"211"},"Update the dependencies array to be: [client, dispatch, searchTerm]",{"range":"212","text":"213"},"Update the dependencies array to be: [dispatch, idServiceAssoc.id, idServiceAssoc.key]",{"range":"214","text":"215"},"removeEscape",{"range":"216","text":"217"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"218","text":"219"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [dispatch, refreshKey]",{"range":"220","text":"221"},"Update the dependencies array to be: [props]",{"range":"222","text":"223"},{"range":"224","text":"221"},"Update the dependencies array to be: [dispatch]",{"range":"225","text":"226"},[1445,1457],"[dispatch, setCliente]",[5115,5122],"[dispatch, mount]",[6595,6607],"[client, dispatch, searchTerm]",[6814,6834],"[dispatch, idServiceAssoc.id, idServiceAssoc.key]",[18933,18934],"",[18933,18933],"\\",[3170,3182],"[dispatch, refreshKey]",[4363,4365],"[props]",[4081,4093],[4192,4194],"[dispatch]"]